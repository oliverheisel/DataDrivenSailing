[
    {
        "id": "8aa1eea5c21e7d1c",
        "type": "tab",
        "label": "Control",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6d74585e23cec175",
        "type": "tab",
        "label": "LiveData",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7805de2be92eb497",
        "type": "tab",
        "label": "LogTransfer",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "42fedc37cdaa024d",
        "type": "tab",
        "label": "AnalysisPrep Delete",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dfc6be75c29e3d81",
        "type": "tab",
        "label": "Story",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cac41ceca32ba8f4",
        "type": "tab",
        "label": "Wind",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d8699a550f41ef88",
        "type": "tab",
        "label": "Phone Integration",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ddf0ae6b0f14b564",
        "type": "tab",
        "label": "ErrorHandling",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0e151f65fcc2bf1c",
        "type": "group",
        "z": "8aa1eea5c21e7d1c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e4b8f6a0248ef87d",
            "397c1506decea8fd",
            "b052878629053aa3",
            "1b9bc9dde11f2073",
            "21e88280f76cd19a",
            "84981f489f4c65e5",
            "859d63a123d49e0b",
            "e405c7cb1fa64c18",
            "64a08fffe23f7c59",
            "3fd531bf6b965a01",
            "beb3a915ca0cda00"
        ],
        "x": 54,
        "y": 59,
        "w": 1698,
        "h": 302
    },
    {
        "id": "07c9f6dd467a782e",
        "type": "group",
        "z": "8aa1eea5c21e7d1c",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "35aaa9130d19d231",
            "cfa87ae73b073d3a",
            "0cae796194415cf7",
            "eb22878fb3c54932",
            "9132d09c0cf237f4",
            "042e412376bb9462",
            "2c286b87ed11d004",
            "a856635bf67ade94",
            "643f3820a61775eb",
            "0118a32f73b79517",
            "dd9f034c56b8bb92",
            "c49120a9632faa8f",
            "3dfe37b68f692a89"
        ],
        "x": 54,
        "y": 1139,
        "w": 1458,
        "h": 302
    },
    {
        "id": "4740cea456836aec",
        "type": "group",
        "z": "8aa1eea5c21e7d1c",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "17201055bee67f11",
            "d396bca60c21e9bd",
            "e6d86bba50db7522",
            "774ce5a8a2bbcaca",
            "6429a88de3dd3e5d",
            "e273d7b499085ead",
            "1bb6a63c9554bfed",
            "183605ba213097f9",
            "c9c447866505dec7",
            "e9197480290f4e71",
            "cc3bfe16bd909ea7"
        ],
        "x": 54,
        "y": 719,
        "w": 1698,
        "h": 282
    },
    {
        "id": "03dcf59639cf9c26",
        "type": "group",
        "z": "8aa1eea5c21e7d1c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4a050105971c6afa",
            "c97ea9b9048d432e",
            "a7fd622bf5388348",
            "929ef1be54abc282",
            "29fe646c7c233a80",
            "46fad8091d1672ce",
            "71c97fd620dc39f3",
            "2222add214a27fc5",
            "196af248fc757735",
            "bcb66cbc9f78c58e",
            "d8d9ac7b7fad2e1d",
            "214ee279291f84a8"
        ],
        "x": 54,
        "y": 1479,
        "w": 1672,
        "h": 202
    },
    {
        "id": "badeae04d49111c1",
        "type": "group",
        "z": "8aa1eea5c21e7d1c",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "91d4659de46772b1",
            "7d954a8d4bfebaa1",
            "bf222684514e0e44",
            "2a3f1b64ca23f23d",
            "9bd8ec32589ba980",
            "d14872a57017fdd1",
            "6962bca0010d89fc",
            "28beb11935af6068",
            "6fc36304c8d5af55",
            "0c4bad1cb0751757",
            "70f4fd1a1c776499"
        ],
        "x": 54,
        "y": 379,
        "w": 1698,
        "h": 322
    },
    {
        "id": "587299b4e14e6e2e",
        "type": "group",
        "z": "6d74585e23cec175",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2941dd882c426227",
            "39245c2889d1022b",
            "30864c1af38deb84",
            "5a8cab427fbf053d",
            "15b762db0240444e",
            "9f9c54325ee2de7a",
            "90f859a9403b51b5"
        ],
        "x": 74,
        "y": 279,
        "w": 932,
        "h": 202
    },
    {
        "id": "46e9239769858e9b",
        "type": "group",
        "z": "6d74585e23cec175",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2ffedccf0f404f1e",
            "8ff736e4d3b5869d",
            "5f18f4afd967a6ee",
            "efe5b84b4740e738",
            "63f780eaa8800799",
            "d7f382d20dca7732",
            "201762c612e26fe1"
        ],
        "x": 74,
        "y": 59,
        "w": 932,
        "h": 202
    },
    {
        "id": "566772339dea8365",
        "type": "group",
        "z": "6d74585e23cec175",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f97db8a8cab0adea",
            "052596940a30957d",
            "cd3a16086bed309d",
            "2bf9fcab3238a6b0",
            "5c3e29d344a20f1d",
            "b8a5915312346964",
            "9d7624ef87a7bc6d",
            "2f4a1d9ce62d199b"
        ],
        "x": 74,
        "y": 499,
        "w": 932,
        "h": 282
    },
    {
        "id": "dd92acadfe942d07",
        "type": "group",
        "z": "6d74585e23cec175",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a69da3f584819fb1",
            "b06f5e5a92639a23",
            "9ba963412c450794",
            "44e186b03635db82",
            "c78ba9ebc6351983",
            "0dcfc7573f99a075",
            "cdb00d31df0e811e"
        ],
        "x": 74,
        "y": 799,
        "w": 932,
        "h": 162
    },
    {
        "id": "48fc0fb0e591b49a",
        "type": "group",
        "z": "7805de2be92eb497",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3445948354b61f97",
            "4912862498d078a1",
            "a5adbef194bd7434",
            "3d58aabd91ca1a35",
            "4145d2c39de12387",
            "fcdd659999154936",
            "215ce34c4faf7d2d",
            "e5656e2047253b8e",
            "fc62b17ffd6c6aad",
            "e5cdda1f0ecefa11",
            "5f75bd5addcd2a4b",
            "c15dcdfa6da3de50",
            "54a7d120b0ed8d8a"
        ],
        "x": 34,
        "y": 119,
        "w": 1692,
        "h": 242
    },
    {
        "id": "6c66380b5d3206b6",
        "type": "group",
        "z": "42fedc37cdaa024d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "18692c41c83f4091",
            "63dc9cb990257c6c",
            "b59c4f02f68f7f5b",
            "327baeadee3896d7",
            "f59ecf14f5932959",
            "2c16b294d3d7c4e8",
            "ed739cd0dcbd5868",
            "b81ff69465a7dc4f",
            "90eaf42c144b5c03",
            "e3584ca79577c844",
            "ace358512031ba44",
            "8c134f872ad27ff6",
            "2c0732fe0a38b28f",
            "3fdc993e17dfb4f7",
            "2ef1a589cb5f38d1",
            "4a03ef6bcaa2ab82",
            "cb8302a9ae60ccd9"
        ],
        "x": 174,
        "y": 819,
        "w": 1152,
        "h": 362
    },
    {
        "id": "2792d2a602160f2e",
        "type": "group",
        "z": "42fedc37cdaa024d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8290fac13c8012ea",
            "a144854534600778",
            "233c3ea8994614bf",
            "9d110852a9290478",
            "64957892fe9fad7f",
            "7ef08dfced2acb79",
            "f98884b12536eb0e",
            "a468172b79ab6ff8",
            "e3897585698f5239",
            "a163fdf7837af9e4",
            "68b214c161394368"
        ],
        "x": 174,
        "y": 99,
        "w": 1432,
        "h": 202
    },
    {
        "id": "8d79760159f30992",
        "type": "group",
        "z": "42fedc37cdaa024d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b43be1186c2fcd0a",
            "89e1d1081aa3a904",
            "eac1929312bfb0f0",
            "866b542e3aa7868e",
            "90750f6b1b7a2130",
            "370f867cc348f3b8",
            "ce300dffac3f54e1",
            "2b9687b42ad51aa1",
            "422e381738a9ced3",
            "d85c0829cddab410",
            "1a539c4825a5f75e",
            "7186c5f47220f6e7"
        ],
        "x": 174,
        "y": 339,
        "w": 1412,
        "h": 229.5
    },
    {
        "id": "bdd80abe45dfbbae",
        "type": "group",
        "z": "dfc6be75c29e3d81",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cc0fab8d88dfd52c",
            "45ecf11e7df1daa7",
            "11cb6fa41491b1b4",
            "773e4b182d54ee32",
            "a850be6cd71fb32f",
            "b1478ec999e555e1",
            "f92c41b160583d7d",
            "794685e93cf82a57",
            "bf980d0b39406e8e",
            "ecc79553fc29afad"
        ],
        "x": 114,
        "y": 379,
        "w": 812,
        "h": 322
    },
    {
        "id": "164d505cef501ef2",
        "type": "group",
        "z": "dfc6be75c29e3d81",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e28d248a8ee362b1",
            "e38edc11d6b88c84",
            "e70898258eced7f2",
            "a5d86884e5d1f854",
            "764bbb7ff15c98bf",
            "675858dcae7073d1",
            "b3cb8581813948ad",
            "7a030ed36247437c",
            "a21c2554a92d54e0",
            "51f3e625ca9461c8",
            "b3866f8d75598829",
            "e9976984db6fe285",
            "f8664a6736684b75"
        ],
        "x": 114,
        "y": 39,
        "w": 952,
        "h": 322
    },
    {
        "id": "b71a6dbc8e6a15a8",
        "type": "group",
        "z": "dfc6be75c29e3d81",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5393d63aa05cb5e9",
            "5de2d0c9d5814fac",
            "6a98d3d3681ff516",
            "af6be6b007e506c3",
            "f94d80777d523641",
            "e397b52aadc3056f",
            "4c58b677f7cff602",
            "86b3d4cec2af2094",
            "1bb54de7da16fefa",
            "befe1993f6594d89",
            "87fb462030fb371b",
            "908c55d2ee539d80"
        ],
        "x": 114,
        "y": 719,
        "w": 872,
        "h": 322
    },
    {
        "id": "fab8f998ea327db9",
        "type": "group",
        "z": "cac41ceca32ba8f4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "62afc8e9b0284991",
            "ddfbf199c58e4f65",
            "f252145cfbad1321",
            "557e34db65adff2d",
            "91d87ce984bee544",
            "fab8bd20a3af2d2c",
            "3efad084a44a2143",
            "c30e207efd8ebd48",
            "65066aa50935f39f",
            "a2395d9057c46ef9",
            "e69b11a1a6e6629c",
            "5a95e6d353ba1a13",
            "c5a7a57af05ac1a5",
            "d716fe94a1255f6b",
            "330f2c8944cb2bc8",
            "f799179af90d5601",
            "a59c2672c332ac1d",
            "3b713c50c07ac4be",
            "a799cd675869e3a0"
        ],
        "x": 114,
        "y": 79,
        "w": 952,
        "h": 662
    },
    {
        "id": "d175e45e6facd7fa",
        "type": "group",
        "z": "ddf0ae6b0f14b564",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "60dd77cbea8a74d2",
            "1407cbb82301a3f9",
            "3b2ab115f47b6556",
            "c68e5cb3f4a61ec3",
            "281ca9390dc83d59",
            "07aad5c55e420710",
            "6f3ec9d1b7575834",
            "ddc635fe60b47a1e",
            "aee0109d299a81ce",
            "24fa1666207a615e",
            "979796b66a563b35",
            "a6b08bac86681708",
            "4b68afc291b39460",
            "d32e4202f4795119",
            "c84c3e9f4a5a3b11",
            "dab8596eedc432ce",
            "f7aa225017ae99e9",
            "f2de5d1d93afbeaa",
            "1c6630876dc198ff",
            "f9347d45b7d91383",
            "363a3be7dc485b30",
            "f59df9cebe4e4d60"
        ],
        "x": 14,
        "y": 59,
        "w": 1352,
        "h": 582
    },
    {
        "id": "c5cb68d4a1368b13",
        "type": "group",
        "z": "42fedc37cdaa024d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c74231558c1586be",
            "3b6dfedf7a8da58d",
            "f59fddbe55147635",
            "79da4b86265cc251",
            "5f347f0c931aef9c",
            "696d741e8a955d5b",
            "bd87ab2a2fc8f722",
            "15e800919895914b",
            "a226232f7227aaf5"
        ],
        "x": 174,
        "y": 599,
        "w": 1392,
        "h": 182
    },
    {
        "id": "f645809cbc9a0662",
        "type": "group",
        "z": "d8699a550f41ef88",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "259e474bcf82a661",
            "571190578a3c4111",
            "6c101a4417d8117e",
            "fa683d52b7845976",
            "a1b2c3d4e5f60708",
            "b1c2d3e4f5a60708",
            "57ef1d2a7e25d441",
            "f76faf3de5aa2a52",
            "c20dc8faa67f0e7b",
            "f5d056130870205e",
            "2faabede9e7d4765",
            "174d07cbb65791d5",
            "113a2468753170ab",
            "266f07ef9c7ab3ab",
            "cb1aba92c6e3cc16",
            "f0059a2e316903f9"
        ],
        "x": 134,
        "y": 159,
        "w": 972,
        "h": 382
    },
    {
        "id": "ef3ac95acf4574f7",
        "type": "group",
        "z": "d8699a550f41ef88",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c8c906c5028e2096",
            "e7959d1af6e12fa3",
            "54833ecaa8d7e231",
            "01d445e715210c97",
            "1888768656edc614",
            "f5dac30a220b3ea6",
            "450a35c62b4af494",
            "1c77cb1435ac6244"
        ],
        "x": 134,
        "y": 579,
        "w": 1392,
        "h": 162
    },
    {
        "id": "beb3a915ca0cda00",
        "type": "group",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c06b2a91579d9c3d",
            "a69de871863e73c3"
        ],
        "x": 1194,
        "y": 159,
        "w": 532,
        "h": 82
    },
    {
        "id": "c9c447866505dec7",
        "type": "group",
        "z": "8aa1eea5c21e7d1c",
        "g": "4740cea456836aec",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "d07d68747675a5ad",
            "887452a8b9437d47"
        ],
        "x": 1194,
        "y": 799,
        "w": 532,
        "h": 82
    },
    {
        "id": "70f4fd1a1c776499",
        "type": "group",
        "z": "8aa1eea5c21e7d1c",
        "g": "badeae04d49111c1",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "d3a77f33bcf1a80a",
            "4a74a195f7713ddb"
        ],
        "x": 1194,
        "y": 499,
        "w": 532,
        "h": 82
    },
    {
        "id": "dd9f034c56b8bb92",
        "type": "group",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "cef3a8e60d18b1ac",
            "73d680510fcc312f"
        ],
        "x": 934,
        "y": 1239,
        "w": 552,
        "h": 82
    },
    {
        "id": "4288dd7f10ed06f1",
        "type": "mqtt-broker",
        "name": "DockerMosquitto",
        "broker": "172.17.0.1",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "30",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "control/logtransfer",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "false",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7e3ed11dbc74e62a",
        "type": "ui_tab",
        "name": "Control and Stream",
        "icon": "cast_connected",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f1af8a5a08283ddd",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#e2007a",
                "baseFont": "Verdana,Verdana,Geneva,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#006d8f",
                "baseFont": "Verdana,Verdana,Geneva,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#e2007a",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#006d8f",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#006d8f",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#00a7db",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#006d8f",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "Verdana,Verdana,Geneva,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "lime",
                "accents": "indigo",
                "warn": "red",
                "background": "blue-grey",
                "palette": "dark"
            }
        },
        "site": {
            "name": "DataDrivenSailing Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD.MM.YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "54d13dac95332b0c",
        "type": "ui_group",
        "name": "Check",
        "tab": "7e3ed11dbc74e62a",
        "order": 5,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7d9320f5c935209b",
        "type": "ui_tab",
        "name": "Analysis Preparation",
        "icon": "vertical_align_center",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7b134827c965229c",
        "type": "ui_group",
        "name": "BoatTracker ",
        "tab": "7d9320f5c935209b",
        "order": 2,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "120a1faa40e58151",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB Docker",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://172.17.0.1:8087",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "0f8ecdadc130095d",
        "type": "global-config",
        "name": "global-config",
        "env": [
            {
                "name": "InfluxDB_org",
                "value": "myorg",
                "type": "str"
            },
            {
                "name": "InfluxDB_API-Token",
                "value": "_6hmHZ85JSySZsf_bs86wXoBscFosLKSoHxsq_I8ghj9HrVzNyJNf0YMABaDOnZxls5LL5DDeOZedVjBJOclxw==",
                "type": "str"
            },
            {
                "name": "InfluxDB_Bucket_BoatLog",
                "value": "BoatLog",
                "type": "str"
            }
        ]
    },
    {
        "id": "a3fb06f46f46e5a5",
        "type": "ui_group",
        "name": "Log Transfer",
        "tab": "7e3ed11dbc74e62a",
        "order": 4,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "95fa2778082242ee",
        "type": "ui_tab",
        "name": "ControlBox",
        "icon": "touch_app",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e2c97ead8397c075",
        "type": "ui_group",
        "name": "Comment",
        "tab": "95fa2778082242ee",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f54ecf5aa78bbd72",
        "type": "ui_group",
        "name": "Marker",
        "tab": "95fa2778082242ee",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "15a5a15c776c0864",
        "type": "ui_tab",
        "name": "Delete",
        "icon": "delete_forever",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "bfa8af220bdc2c3c",
        "type": "ui_group",
        "name": "Hub Delete",
        "tab": "15a5a15c776c0864",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "53631adca2dab537",
        "type": "ui_group",
        "name": "Tracker Delete",
        "tab": "15a5a15c776c0864",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "476fa773b7bfdf2e",
        "type": "ui_tab",
        "name": "Wind",
        "icon": "wb_cloudy",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "baf37660cc1566a0",
        "type": "ui_group",
        "name": "Windspeed",
        "tab": "476fa773b7bfdf2e",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9fcd7d230c83dda0",
        "type": "ui_group",
        "name": "Wind direction",
        "tab": "476fa773b7bfdf2e",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "304ab8b1ec1b10bc",
        "type": "ui_group",
        "name": "Control",
        "tab": "7e3ed11dbc74e62a",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "52b3dfcd2dd2f0c7",
        "type": "ui_spacer",
        "z": "8aa1eea5c21e7d1c",
        "name": "spacer",
        "group": "304ab8b1ec1b10bc",
        "order": 5,
        "width": "8",
        "height": "1"
    },
    {
        "id": "f43ee60c6daab0dd",
        "type": "ui_spacer",
        "z": "8aa1eea5c21e7d1c",
        "name": "spacer",
        "group": "304ab8b1ec1b10bc",
        "order": 8,
        "width": "8",
        "height": "1"
    },
    {
        "id": "eeb2df40f0865d75",
        "type": "ui_group",
        "name": "BuoyTracker",
        "tab": "7d9320f5c935209b",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bb8cc161927b030e",
        "type": "ui_group",
        "name": "Races",
        "tab": "95fa2778082242ee",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "17a605d969489cb8",
        "type": "ui_tab",
        "name": "Errorhandling",
        "icon": "error_outline",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f58a2c60a623b0ab",
        "type": "ui_group",
        "name": "Terminal trigger",
        "tab": "17a605d969489cb8",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2b0ad1fc43fae8a7",
        "type": "ui_tab",
        "name": "Smartphone",
        "icon": "phonelink_ring",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4b985976f90f6dd3",
        "type": "ui_group",
        "name": "Download Data",
        "tab": "2b0ad1fc43fae8a7",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3f8e2d46c848ed8f",
        "type": "ui_group",
        "name": "Other",
        "tab": "7d9320f5c935209b",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "tab_analysis",
        "type": "ui_tab",
        "name": "Analysis Preparation",
        "order": 4
    },
    {
        "id": "grp_other",
        "type": "ui_group",
        "name": "Other",
        "tab": "tab_analysis",
        "order": 1,
        "width": "8"
    },
    {
        "id": "4a3715950dbbb6c9",
        "type": "ui_group",
        "name": "Analysis file preperation",
        "tab": "2b0ad1fc43fae8a7",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e4b8f6a0248ef87d",
        "type": "mqtt out",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "name": "boatcontrol",
        "topic": "boatcontrol",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4288dd7f10ed06f1",
        "x": 1010,
        "y": 160,
        "wires": []
    },
    {
        "id": "397c1506decea8fd",
        "type": "function",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "name": "Create dict",
        "func": "// Initialize the state object if it doesn't exist yet.\nlet state = context.get('state') || { streamdata: true, logdata: true, deletelog: false };\n\n// If the incoming message has a topic and a boolean payload, update the corresponding state.\n// (ui_switch nodes output a boolean in msg.payload)\nif (msg.topic && typeof msg.payload === 'boolean') {\n    // Use the topic as the key to update the switch state.\n    state[msg.topic] = msg.payload;\n    // Save the updated state back into context.\n    context.set('state', state);\n}\n\n// Set the output payload as the current state dictionary.\nmsg.payload = state;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 160,
        "wires": [
            [
                "e4b8f6a0248ef87d",
                "21e88280f76cd19a"
            ]
        ]
    },
    {
        "id": "b052878629053aa3",
        "type": "ui_switch",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "name": "",
        "label": "Boat - Log data",
        "tooltip": "",
        "group": "304ab8b1ec1b10bc",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "logdata",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 480,
        "y": 220,
        "wires": [
            [
                "397c1506decea8fd"
            ]
        ]
    },
    {
        "id": "1b9bc9dde11f2073",
        "type": "ui_switch",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "name": "",
        "label": "Boat - Deletelog",
        "tooltip": "",
        "group": "53631adca2dab537",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "deletelog",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 480,
        "y": 320,
        "wires": [
            [
                "397c1506decea8fd",
                "64a08fffe23f7c59"
            ]
        ]
    },
    {
        "id": "21e88280f76cd19a",
        "type": "debug",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "name": "BoatTracker_printdict",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 220,
        "wires": []
    },
    {
        "id": "84981f489f4c65e5",
        "type": "inject",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "name": "Set switch to \"on\" at Startup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 220,
        "y": 160,
        "wires": [
            [
                "b052878629053aa3",
                "e405c7cb1fa64c18"
            ]
        ]
    },
    {
        "id": "859d63a123d49e0b",
        "type": "inject",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "name": "Send every second",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 520,
        "y": 100,
        "wires": [
            [
                "397c1506decea8fd"
            ]
        ]
    },
    {
        "id": "c06b2a91579d9c3d",
        "type": "mqtt in",
        "z": "8aa1eea5c21e7d1c",
        "g": "beb3a915ca0cda00",
        "name": "",
        "topic": "boatcontrol",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4288dd7f10ed06f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1290,
        "y": 200,
        "wires": [
            [
                "a69de871863e73c3"
            ]
        ]
    },
    {
        "id": "35aaa9130d19d231",
        "type": "ui_table",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "group": "54d13dac95332b0c",
        "name": "Status Control Table - Control tab",
        "order": 6,
        "width": "8",
        "height": "4",
        "columns": [
            {
                "field": "identifier",
                "title": "ID",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "batperc",
                "title": "Battery %",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "streamdata",
                "title": "Streamdata",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "logdata",
                "title": "Logdata",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "deletelog",
                "title": "Deletelog",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 620,
        "y": 1280,
        "wires": []
    },
    {
        "id": "cfa87ae73b073d3a",
        "type": "mqtt in",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "name": "",
        "topic": "boatstatus",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4288dd7f10ed06f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 1240,
        "wires": [
            [
                "0cae796194415cf7",
                "042e412376bb9462"
            ]
        ]
    },
    {
        "id": "0cae796194415cf7",
        "type": "function",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "name": "ParseStatus",
        "func": "// Get the identifier, streamdata, and logdata from the incoming payload\nvar identifier = msg.payload.identifier || \"unknown\";  // default to \"unknown\" if identifier is missing\nvar streamdata = msg.payload.streamdata !== undefined ? msg.payload.streamdata : false;  // default to false if streamdata is missing\nvar logdata = msg.payload.logdata !== undefined ? msg.payload.logdata : false;  // default to false if logdata is missing\n\n// Create a message to be sent to InfluxDB\nvar message = {\n    identifier: identifier,\n    streamdata: streamdata,\n    logdata: logdata\n};\n\n// Add any additional optional fields if they exist\nif (msg.payload.hasOwnProperty(\"extraField1\")) {\n    message.extraField1 = msg.payload.extraField1;\n}\nif (msg.payload.hasOwnProperty(\"extraField2\")) {\n    message.extraField2 = msg.payload.extraField2;\n}\n\n// Set the processed message and identifier for tracking\nmsg.payload = message;\nmsg.measurement = identifier;  // Use identifier as measurement name\n\n// Return the message for further processing\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1360,
        "wires": [
            [
                "eb22878fb3c54932",
                "9132d09c0cf237f4"
            ]
        ]
    },
    {
        "id": "eb22878fb3c54932",
        "type": "influxdb out",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "influxdb": "120a1faa40e58151",
        "name": "Status to InfluxDB",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "myorg",
        "bucket": "Status",
        "x": 570,
        "y": 1360,
        "wires": []
    },
    {
        "id": "9132d09c0cf237f4",
        "type": "debug",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "name": "print parsed status",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1400,
        "wires": []
    },
    {
        "id": "042e412376bb9462",
        "type": "function",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "name": "Create table",
        "func": "// Initialize flow variable if it doesn't exist\nif (!flow.dataList) {\n    flow.dataList = [];\n}\n\n// Extract identifier and other values from the payload\nvar identifier = msg.payload.identifier || \"unknown\";  // Default to \"unknown\" if identifier is missing\n\n// Explicitly check for undefined and log the result\nvar batperc = (msg.payload.hasOwnProperty('batperc')) ? msg.payload.batperc + \" %\" : \"undefined\";\nvar streamdata = (msg.payload.hasOwnProperty('streamdata')) ? msg.payload.streamdata : \"undefined\";\nvar logdata = (msg.payload.hasOwnProperty('logdata')) ? msg.payload.logdata : \"undefined\";\nvar deletelog = (msg.payload.hasOwnProperty('deletelogstatus')) ? msg.payload.deletelogstatus : \"undefined\";\n\n// Print out the values for debugging\n//node.warn(`Received data: identifier=${identifier}, streamdata=${streamdata}, logdata=${logdata}`);\n\n// Create an object to store the row data\nvar row = {\n    identifier: identifier,\n    batperc: batperc,\n    streamdata: streamdata,  // Directly use the value or \"undefined\"\n    logdata: logdata,  // Directly use the value or \"undefined\"\n    deletelog: deletelog\n};\n\n// Check if the identifier is already in the list\nvar index = flow.dataList.findIndex(item => item.identifier === identifier);\n\nif (index === -1) {\n    // If not found, push a new row\n    flow.dataList.push(row);\n} else {\n    // If found, update the existing row\n    flow.dataList[index] = row;\n}\n\n// Set the message to pass to the table\nmsg.payload = flow.dataList;\n\n// Return the message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1240,
        "wires": [
            [
                "2c286b87ed11d004",
                "35aaa9130d19d231",
                "643f3820a61775eb"
            ]
        ]
    },
    {
        "id": "2c286b87ed11d004",
        "type": "debug",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "name": "print table",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 1240,
        "wires": []
    },
    {
        "id": "a856635bf67ade94",
        "type": "ui_text",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "group": "54d13dac95332b0c",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Controlstatus (last send from Tracker):",
        "format": "",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "Verdana,Verdana,Geneva,sans-serif",
        "fontSize": "18",
        "color": "#000000",
        "x": 630,
        "y": 1200,
        "wires": []
    },
    {
        "id": "e405c7cb1fa64c18",
        "type": "ui_switch",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "name": "",
        "label": "Boat - Stream data",
        "tooltip": "",
        "group": "304ab8b1ec1b10bc",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "streamdata",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 490,
        "y": 160,
        "wires": [
            [
                "397c1506decea8fd"
            ]
        ]
    },
    {
        "id": "4a050105971c6afa",
        "type": "http request",
        "z": "8aa1eea5c21e7d1c",
        "g": "03dcf59639cf9c26",
        "name": "http request to nodered support api",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://172.17.0.1:5000/ping",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1080,
        "y": 1640,
        "wires": [
            [
                "c97ea9b9048d432e",
                "29fe646c7c233a80"
            ]
        ]
    },
    {
        "id": "c97ea9b9048d432e",
        "type": "debug",
        "z": "8aa1eea5c21e7d1c",
        "g": "03dcf59639cf9c26",
        "name": "print http request response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 1580,
        "wires": []
    },
    {
        "id": "a7fd622bf5388348",
        "type": "function",
        "z": "8aa1eea5c21e7d1c",
        "g": "03dcf59639cf9c26",
        "name": "One message for each device",
        "func": "// Extract the `_value` field from each object and create an array of messages\nlet messages = msg.payload.map(item => {\n    return { payload: { device: item._value } };\n});\n\n// Return multiple messages (one per device)\nreturn [messages];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1640,
        "wires": [
            [
                "4a050105971c6afa"
            ]
        ]
    },
    {
        "id": "929ef1be54abc282",
        "type": "ui_table",
        "z": "8aa1eea5c21e7d1c",
        "g": "03dcf59639cf9c26",
        "group": "54d13dac95332b0c",
        "name": "Table with ping status",
        "order": 4,
        "width": "8",
        "height": "4",
        "columns": [
            {
                "field": "id",
                "title": "id",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "ping",
                "title": "ping",
                "width": "20%",
                "align": "left",
                "formatter": "color",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1580,
        "y": 1640,
        "wires": []
    },
    {
        "id": "29fe646c7c233a80",
        "type": "function",
        "z": "8aa1eea5c21e7d1c",
        "g": "03dcf59639cf9c26",
        "name": "Create table",
        "func": "// Retrieve the existing table data from context storage\nlet tableData = context.get(\"tableData\") || [];\n\n// Check if the device already exists in the table\nlet existingIndex = tableData.findIndex(entry => entry.id === msg.payload.id);\n\n// Determine color (green if true, red if false)\nlet color = msg.payload.ping ? \"#00FF00\" : \"#FF0000\"; // Green if true, Red if false\n\nif (existingIndex !== -1) {\n    // Update existing device status\n    tableData[existingIndex] = {\n        id: msg.payload.id,\n        ping: color // Send only the HEX color code\n    };\n} else {\n    // Add new device entry\n    tableData.push({\n        id: msg.payload.id,\n        ping: color // Send only the HEX color code\n    });\n}\n\n// Store the updated table data\ncontext.set(\"tableData\", tableData);\n\n// **Force refresh by sending an empty payload first**\nnode.send({ payload: [] });\n\n// Wait 50ms and then send the updated table data\nsetTimeout(() => {\n    node.send({ payload: tableData });\n}, 50);\n\n// Do not return msg, as we are sending two separate messages\nreturn;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1640,
        "wires": [
            [
                "929ef1be54abc282"
            ]
        ]
    },
    {
        "id": "46fad8091d1672ce",
        "type": "function",
        "z": "8aa1eea5c21e7d1c",
        "g": "03dcf59639cf9c26",
        "name": "Count devices",
        "func": "// Count the number of devices\nlet deviceCount = msg.payload.length;\n\n// Return the count as payload\nmsg.payload = { device_count: deviceCount };\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1580,
        "wires": [
            [
                "71c97fd620dc39f3"
            ]
        ]
    },
    {
        "id": "71c97fd620dc39f3",
        "type": "ui_text",
        "z": "8aa1eea5c21e7d1c",
        "g": "03dcf59639cf9c26",
        "group": "54d13dac95332b0c",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Devices connected",
        "format": "{{msg.payload.device_count}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1270,
        "y": 1580,
        "wires": []
    },
    {
        "id": "2222add214a27fc5",
        "type": "inject",
        "z": "8aa1eea5c21e7d1c",
        "g": "03dcf59639cf9c26",
        "name": "Auto Trigger Every 10s",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "20",
        "topic": "",
        "x": 210,
        "y": 1580,
        "wires": [
            [
                "196af248fc757735"
            ]
        ]
    },
    {
        "id": "196af248fc757735",
        "type": "ui_switch",
        "z": "8aa1eea5c21e7d1c",
        "g": "03dcf59639cf9c26",
        "name": "Hub - Ping Tracker",
        "label": "Hub - Ping Tracker",
        "tooltip": "",
        "group": "304ab8b1ec1b10bc",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 510,
        "y": 1580,
        "wires": [
            [
                "bcb66cbc9f78c58e"
            ]
        ]
    },
    {
        "id": "bcb66cbc9f78c58e",
        "type": "influxdb in",
        "z": "8aa1eea5c21e7d1c",
        "g": "03dcf59639cf9c26",
        "influxdb": "120a1faa40e58151",
        "name": "Fetch Devices from InfluxDB",
        "query": "import \"influxdata/influxdb/schema\"\nschema.measurements(bucket: \"Status\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "myorg",
        "x": 780,
        "y": 1580,
        "wires": [
            [
                "46fad8091d1672ce",
                "a7fd622bf5388348"
            ]
        ]
    },
    {
        "id": "d8d9ac7b7fad2e1d",
        "type": "inject",
        "z": "8aa1eea5c21e7d1c",
        "g": "03dcf59639cf9c26",
        "name": "Default true on startup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 220,
        "y": 1640,
        "wires": [
            [
                "196af248fc757735"
            ]
        ]
    },
    {
        "id": "64a08fffe23f7c59",
        "type": "Invert",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "name": "Invert",
        "x": 290,
        "y": 260,
        "wires": [
            [
                "b052878629053aa3"
            ]
        ]
    },
    {
        "id": "643f3820a61775eb",
        "type": "ui_table",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "group": "53631adca2dab537",
        "name": "Status Control Table - delete tab",
        "order": 6,
        "width": "8",
        "height": "4",
        "columns": [
            {
                "field": "identifier",
                "title": "id",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "streamdata",
                "title": "streamdata",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "logdata",
                "title": "logdata",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "deletelog",
                "title": "deletelog",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 610,
        "y": 1320,
        "wires": []
    },
    {
        "id": "17201055bee67f11",
        "type": "mqtt out",
        "z": "8aa1eea5c21e7d1c",
        "g": "4740cea456836aec",
        "name": "hubcontrol",
        "topic": "hubcontrol",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4288dd7f10ed06f1",
        "x": 1010,
        "y": 840,
        "wires": []
    },
    {
        "id": "d396bca60c21e9bd",
        "type": "function",
        "z": "8aa1eea5c21e7d1c",
        "g": "4740cea456836aec",
        "name": "Create dict",
        "func": "// Initialize the state object if it doesn't exist yet.\nlet state = context.get('state') || { streamdata: true, logdata: true, deletelog: false };\n\n// If the incoming message has a topic and a boolean payload, update the corresponding state.\n// (ui_switch nodes output a boolean in msg.payload)\nif (msg.topic && typeof msg.payload === 'boolean') {\n    // Use the topic as the key to update the switch state.\n    state[msg.topic] = msg.payload;\n    // Save the updated state back into context.\n    context.set('state', state);\n}\n\n// Set the output payload as the current state dictionary.\nmsg.payload = state;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 840,
        "wires": [
            [
                "17201055bee67f11",
                "774ce5a8a2bbcaca"
            ]
        ]
    },
    {
        "id": "e6d86bba50db7522",
        "type": "ui_switch",
        "z": "8aa1eea5c21e7d1c",
        "g": "4740cea456836aec",
        "name": "",
        "label": "Hub - Log data",
        "tooltip": "",
        "group": "304ab8b1ec1b10bc",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "logdata",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 480,
        "y": 900,
        "wires": [
            [
                "d396bca60c21e9bd"
            ]
        ]
    },
    {
        "id": "774ce5a8a2bbcaca",
        "type": "debug",
        "z": "8aa1eea5c21e7d1c",
        "g": "4740cea456836aec",
        "name": "Hub_printdict",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 900,
        "wires": []
    },
    {
        "id": "6429a88de3dd3e5d",
        "type": "inject",
        "z": "8aa1eea5c21e7d1c",
        "g": "4740cea456836aec",
        "name": "Set switch to \"on\" at Startup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 220,
        "y": 840,
        "wires": [
            [
                "e6d86bba50db7522",
                "1bb6a63c9554bfed"
            ]
        ]
    },
    {
        "id": "e273d7b499085ead",
        "type": "inject",
        "z": "8aa1eea5c21e7d1c",
        "g": "4740cea456836aec",
        "name": "Send every second",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 500,
        "y": 780,
        "wires": [
            [
                "d396bca60c21e9bd"
            ]
        ]
    },
    {
        "id": "1bb6a63c9554bfed",
        "type": "ui_switch",
        "z": "8aa1eea5c21e7d1c",
        "g": "4740cea456836aec",
        "name": "",
        "label": "Hub - Stream data",
        "tooltip": "",
        "group": "304ab8b1ec1b10bc",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "streamdata",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 490,
        "y": 840,
        "wires": [
            [
                "d396bca60c21e9bd"
            ]
        ]
    },
    {
        "id": "a69de871863e73c3",
        "type": "debug",
        "z": "8aa1eea5c21e7d1c",
        "g": "beb3a915ca0cda00",
        "name": "print msg from topic \"boatcontrol\"",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 200,
        "wires": []
    },
    {
        "id": "183605ba213097f9",
        "type": "comment",
        "z": "8aa1eea5c21e7d1c",
        "g": "4740cea456836aec",
        "name": "Hub Control",
        "info": "",
        "x": 150,
        "y": 760,
        "wires": []
    },
    {
        "id": "3fd531bf6b965a01",
        "type": "comment",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "name": "BoatTracker Control",
        "info": "",
        "x": 170,
        "y": 100,
        "wires": []
    },
    {
        "id": "d07d68747675a5ad",
        "type": "mqtt in",
        "z": "8aa1eea5c21e7d1c",
        "g": "c9c447866505dec7",
        "name": "",
        "topic": "hubcontrol",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4288dd7f10ed06f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1280,
        "y": 840,
        "wires": [
            [
                "887452a8b9437d47"
            ]
        ]
    },
    {
        "id": "887452a8b9437d47",
        "type": "debug",
        "z": "8aa1eea5c21e7d1c",
        "g": "c9c447866505dec7",
        "name": "print msg from topic \"hubcontrol\"",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 840,
        "wires": []
    },
    {
        "id": "91d4659de46772b1",
        "type": "mqtt out",
        "z": "8aa1eea5c21e7d1c",
        "g": "badeae04d49111c1",
        "name": "buoycontrol",
        "topic": "buoycontrol",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4288dd7f10ed06f1",
        "x": 1010,
        "y": 500,
        "wires": []
    },
    {
        "id": "7d954a8d4bfebaa1",
        "type": "function",
        "z": "8aa1eea5c21e7d1c",
        "g": "badeae04d49111c1",
        "name": "Create dict",
        "func": "// Initialize the state object if it doesn't exist yet.\nlet state = context.get('state') || { streamdata: true, logdata: true, deletelog: false };\n\n// If the incoming message has a topic and a boolean payload, update the corresponding state.\n// (ui_switch nodes output a boolean in msg.payload)\nif (msg.topic && typeof msg.payload === 'boolean') {\n    // Use the topic as the key to update the switch state.\n    state[msg.topic] = msg.payload;\n    // Save the updated state back into context.\n    context.set('state', state);\n}\n\n// Set the output payload as the current state dictionary.\nmsg.payload = state;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 500,
        "wires": [
            [
                "91d4659de46772b1",
                "9bd8ec32589ba980"
            ]
        ]
    },
    {
        "id": "bf222684514e0e44",
        "type": "ui_switch",
        "z": "8aa1eea5c21e7d1c",
        "g": "badeae04d49111c1",
        "name": "",
        "label": "Buoy - Log data",
        "tooltip": "",
        "group": "304ab8b1ec1b10bc",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "logdata",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 480,
        "y": 560,
        "wires": [
            [
                "7d954a8d4bfebaa1"
            ]
        ]
    },
    {
        "id": "2a3f1b64ca23f23d",
        "type": "ui_switch",
        "z": "8aa1eea5c21e7d1c",
        "g": "badeae04d49111c1",
        "name": "",
        "label": "Buoy - Deletelog",
        "tooltip": "",
        "group": "53631adca2dab537",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "deletelog",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 490,
        "y": 660,
        "wires": [
            [
                "7d954a8d4bfebaa1",
                "6fc36304c8d5af55"
            ]
        ]
    },
    {
        "id": "9bd8ec32589ba980",
        "type": "debug",
        "z": "8aa1eea5c21e7d1c",
        "g": "badeae04d49111c1",
        "name": "BuoyTracker_printdict",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 560,
        "wires": []
    },
    {
        "id": "d14872a57017fdd1",
        "type": "inject",
        "z": "8aa1eea5c21e7d1c",
        "g": "badeae04d49111c1",
        "name": "Set switch to \"on\" at Startup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 220,
        "y": 500,
        "wires": [
            [
                "bf222684514e0e44",
                "28beb11935af6068"
            ]
        ]
    },
    {
        "id": "6962bca0010d89fc",
        "type": "inject",
        "z": "8aa1eea5c21e7d1c",
        "g": "badeae04d49111c1",
        "name": "Send every second",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 500,
        "y": 440,
        "wires": [
            [
                "7d954a8d4bfebaa1"
            ]
        ]
    },
    {
        "id": "28beb11935af6068",
        "type": "ui_switch",
        "z": "8aa1eea5c21e7d1c",
        "g": "badeae04d49111c1",
        "name": "",
        "label": "Buoy - Stream data",
        "tooltip": "",
        "group": "304ab8b1ec1b10bc",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "streamdata",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 490,
        "y": 500,
        "wires": [
            [
                "7d954a8d4bfebaa1"
            ]
        ]
    },
    {
        "id": "6fc36304c8d5af55",
        "type": "Invert",
        "z": "8aa1eea5c21e7d1c",
        "g": "badeae04d49111c1",
        "name": "Invert",
        "x": 290,
        "y": 600,
        "wires": [
            [
                "bf222684514e0e44"
            ]
        ]
    },
    {
        "id": "0c4bad1cb0751757",
        "type": "comment",
        "z": "8aa1eea5c21e7d1c",
        "g": "badeae04d49111c1",
        "name": "BuoyTracker Control",
        "info": "",
        "x": 170,
        "y": 420,
        "wires": []
    },
    {
        "id": "d3a77f33bcf1a80a",
        "type": "mqtt in",
        "z": "8aa1eea5c21e7d1c",
        "g": "70f4fd1a1c776499",
        "name": "",
        "topic": "buoycontrol",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4288dd7f10ed06f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1290,
        "y": 540,
        "wires": [
            [
                "4a74a195f7713ddb"
            ]
        ]
    },
    {
        "id": "4a74a195f7713ddb",
        "type": "debug",
        "z": "8aa1eea5c21e7d1c",
        "g": "70f4fd1a1c776499",
        "name": "print msg from topic \"buoycontrol\"",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 540,
        "wires": []
    },
    {
        "id": "0118a32f73b79517",
        "type": "comment",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "name": "Tracker Status",
        "info": "",
        "x": 150,
        "y": 1180,
        "wires": []
    },
    {
        "id": "cef3a8e60d18b1ac",
        "type": "mqtt in",
        "z": "8aa1eea5c21e7d1c",
        "g": "dd9f034c56b8bb92",
        "name": "",
        "topic": "trackerstatus",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4288dd7f10ed06f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1030,
        "y": 1280,
        "wires": [
            [
                "73d680510fcc312f"
            ]
        ]
    },
    {
        "id": "73d680510fcc312f",
        "type": "debug",
        "z": "8aa1eea5c21e7d1c",
        "g": "dd9f034c56b8bb92",
        "name": "print msg from topic \"trackerstatus\"",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 1280,
        "wires": []
    },
    {
        "id": "214ee279291f84a8",
        "type": "comment",
        "z": "8aa1eea5c21e7d1c",
        "g": "03dcf59639cf9c26",
        "name": "Ping check",
        "info": "Check if devices that have been connected in the past 12hr are online.",
        "x": 140,
        "y": 1520,
        "wires": []
    },
    {
        "id": "c49120a9632faa8f",
        "type": "mqtt in",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "name": "",
        "topic": "buoystatus",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4288dd7f10ed06f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 1300,
        "wires": [
            [
                "042e412376bb9462",
                "0cae796194415cf7"
            ]
        ]
    },
    {
        "id": "3dfe37b68f692a89",
        "type": "mqtt in",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "name": "",
        "topic": "hubstatus",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4288dd7f10ed06f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 1360,
        "wires": [
            [
                "042e412376bb9462",
                "0cae796194415cf7"
            ]
        ]
    },
    {
        "id": "e9197480290f4e71",
        "type": "Invert",
        "z": "8aa1eea5c21e7d1c",
        "g": "4740cea456836aec",
        "name": "Invert",
        "x": 290,
        "y": 900,
        "wires": [
            [
                "e6d86bba50db7522"
            ]
        ]
    },
    {
        "id": "cc3bfe16bd909ea7",
        "type": "ui_switch",
        "z": "8aa1eea5c21e7d1c",
        "g": "4740cea456836aec",
        "name": "",
        "label": "Hub - Deletelog",
        "tooltip": "",
        "group": "53631adca2dab537",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "deletelog",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 480,
        "y": 960,
        "wires": [
            [
                "e9197480290f4e71",
                "d396bca60c21e9bd"
            ]
        ]
    },
    {
        "id": "8ff736e4d3b5869d",
        "type": "mqtt in",
        "z": "6d74585e23cec175",
        "g": "46e9239769858e9b",
        "name": "boatlive",
        "topic": "boatlive",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4288dd7f10ed06f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 160,
        "wires": [
            [
                "5f18f4afd967a6ee",
                "f97db8a8cab0adea",
                "cd3a16086bed309d",
                "2ffedccf0f404f1e"
            ]
        ]
    },
    {
        "id": "5f18f4afd967a6ee",
        "type": "debug",
        "z": "6d74585e23cec175",
        "g": "46e9239769858e9b",
        "name": "boatlive_print incoming msg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 220,
        "wires": []
    },
    {
        "id": "f97db8a8cab0adea",
        "type": "function",
        "z": "6d74585e23cec175",
        "g": "566772339dea8365",
        "name": "CountMessages_Overall",
        "func": "// make sure the payload is an array\n// if it's not, wrap it in an array\nlet messages = msg.payload;\nif (!Array.isArray(messages)) {\n    messages = [messages];\n}\n\n// retrieve the current overall count from the node's context\nlet overallCount = context.get('overallCount') || 0;\n\n// process each message in the array\nmessages.forEach(function () {\n    // increment the overall message count\n    overallCount++;\n});\n\n// save the updated overall count back to the context\ncontext.set('overallCount', overallCount);\n\n// attach the overall count to the outgoing message\nmsg.payload = { overallCount: overallCount };\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 540,
        "wires": [
            [
                "052596940a30957d",
                "b8a5915312346964"
            ]
        ]
    },
    {
        "id": "052596940a30957d",
        "type": "ui_text",
        "z": "6d74585e23cec175",
        "g": "566772339dea8365",
        "group": "54d13dac95332b0c",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Overall messages received",
        "label": "Overall messages received",
        "format": "{{msg.payload.overallCount}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 860,
        "y": 540,
        "wires": []
    },
    {
        "id": "cd3a16086bed309d",
        "type": "function",
        "z": "6d74585e23cec175",
        "g": "566772339dea8365",
        "name": "CountMessages_ByID",
        "func": "// get the current timestamp\nlet now = Date.now();\n\n// make sure the payload is an array\nlet messages = msg.payload;\nif (!Array.isArray(messages)) {\n    messages = [messages];  // wrap into an array if it's not already\n}\n\n// retrieve the current counts and timestamps from the node's context\nlet trackerCount = context.get('trackerCount') || {};\nlet trackerTimestamps = context.get('trackerTimestamps') || {};\n\n// process each message in the array\nmessages.forEach(function (item) {\n    // Ensure that the 'id' property exists before accessing it\n    if (item && item.id) {\n        let trackerId = item.id;\n\n        // increment the count for this tracker\n        trackerCount[trackerId] = (trackerCount[trackerId] || 0) + 1;\n\n        // update last received timestamp for this tracker\n        trackerTimestamps[trackerId] = now;\n    }\n});\n\n// save the updated counts and timestamps back to the context\ncontext.set('trackerCount', trackerCount);\ncontext.set('trackerTimestamps', trackerTimestamps);\n\n// prepare table data for the ui_table\nlet tableData = [];\n\n// add a row for each tracker with color coding\nfor (let tracker in trackerCount) {\n    let lastReceived = trackerTimestamps[tracker] || 0;\n    let timeSinceLast = now - lastReceived;\n\n    // if the last message was received in the last 5 seconds, set color to green, otherwise red\n    let color = timeSinceLast <= 5000 ? \"#00FF00\" : \"#FF0000\";\n\n    tableData.push({ tracker: tracker, count: trackerCount[tracker], color: color });\n}\n\n// set the payload to the table data\nmsg.payload = tableData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 660,
        "wires": [
            [
                "5c3e29d344a20f1d",
                "2bf9fcab3238a6b0"
            ]
        ]
    },
    {
        "id": "2bf9fcab3238a6b0",
        "type": "ui_table",
        "z": "6d74585e23cec175",
        "g": "566772339dea8365",
        "group": "54d13dac95332b0c",
        "name": "TableOutput",
        "order": 2,
        "width": "8",
        "height": "4",
        "columns": [
            {
                "field": "tracker",
                "title": "Tracker",
                "width": "40%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "count",
                "title": "Count",
                "width": "40%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "color",
                "title": "Last5Seconds",
                "width": "20%",
                "align": "left",
                "formatter": "color",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 810,
        "y": 640,
        "wires": []
    },
    {
        "id": "5c3e29d344a20f1d",
        "type": "debug",
        "z": "6d74585e23cec175",
        "g": "566772339dea8365",
        "name": "Debug_TableOutput",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 680,
        "wires": []
    },
    {
        "id": "b8a5915312346964",
        "type": "debug",
        "z": "6d74585e23cec175",
        "g": "566772339dea8365",
        "name": "Debug_OverallCount",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 580,
        "wires": []
    },
    {
        "id": "efe5b84b4740e738",
        "type": "debug",
        "z": "6d74585e23cec175",
        "g": "46e9239769858e9b",
        "name": "print influxDB input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 140,
        "wires": []
    },
    {
        "id": "63f780eaa8800799",
        "type": "function",
        "z": "6d74585e23cec175",
        "g": "46e9239769858e9b",
        "name": "ParseFunction",
        "func": "let data = msg.payload;\n\n// Only proceed if data.validtime === true\nif (data.validtime !== true) {\n    // Stop processing and do not send a message forward\n    return null;\n}\n\n// If validtime is true, build your message\nlet message = {\n    batvolt: parseFloat(data.batvolt) || null,\n    batperc: parseFloat(data.batperc) || null,\n    HDOP: parseFloat(data.HDOP) || null,\n    alt: parseFloat(data.alt) || null,\n    nSat: parseInt(data.nSat, 10) || null,\n    SOG: parseFloat(data.SOG) || null,\n    lat: parseFloat(data.lat) || null,\n    long: parseFloat(data.long) || null,\n    fixQ: parseInt(data.fixQ, 10) || null,\n    validtime: data.validtime === true ? 1 : 0,\n    COG: data.COG || null,\n    status: data.status || null,\n    time: new Date(data.datetime).getTime() || null,\n    id: data.id || null\n};\n\nmsg.payload = message;\nmsg.measurement = data.id;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 160,
        "wires": [
            [
                "efe5b84b4740e738",
                "d7f382d20dca7732"
            ]
        ]
    },
    {
        "id": "d7f382d20dca7732",
        "type": "influxdb out",
        "z": "6d74585e23cec175",
        "g": "46e9239769858e9b",
        "influxdb": "120a1faa40e58151",
        "name": "InfluxDB_In",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "myorg",
        "bucket": "BoatLog",
        "x": 910,
        "y": 180,
        "wires": []
    },
    {
        "id": "2ffedccf0f404f1e",
        "type": "function",
        "z": "6d74585e23cec175",
        "g": "46e9239769858e9b",
        "name": "Split if Array",
        "func": "// Check if the payload is an array\nif (Array.isArray(msg.payload)) {\n    // If it's an array, process each element\n    let messages = msg.payload.map(data => {\n        // If data is a JSON string, parse it\n        if (typeof data === \"string\") {\n            try {\n                data = JSON.parse(data);\n            } catch (error) {\n                node.warn(\"Invalid JSON format: \" + data);\n                return null; // Skip invalid entries\n            }\n        }\n        return { payload: data };\n    });\n\n    // Remove any null (invalid) messages\n    messages = messages.filter(msg => msg !== null);\n\n    return [messages];  // Return an array of messages\n\n} else {\n    // If the payload is not an array (it's a single object), process it\n    if (typeof msg.payload === \"string\") {\n        try {\n            msg.payload = JSON.parse(msg.payload); // Try parsing if it's a string\n        } catch (error) {\n            node.warn(\"Invalid JSON format: \" + msg.payload);\n            return null; // Skip if invalid JSON\n        }\n    }\n\n    // Return the single message as an array (so it can be processed like an array)\n    return [{ payload: msg.payload }];\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 160,
        "wires": [
            [
                "63f780eaa8800799"
            ]
        ]
    },
    {
        "id": "9d7624ef87a7bc6d",
        "type": "inject",
        "z": "6d74585e23cec175",
        "g": "566772339dea8365",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 470,
        "y": 740,
        "wires": [
            [
                "cd3a16086bed309d"
            ]
        ]
    },
    {
        "id": "a69da3f584819fb1",
        "type": "mqtt in",
        "z": "6d74585e23cec175",
        "g": "dd92acadfe942d07",
        "name": "hublive",
        "topic": "hublive",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4288dd7f10ed06f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 920,
        "wires": [
            [
                "b06f5e5a92639a23",
                "9ba963412c450794",
                "f97db8a8cab0adea",
                "cd3a16086bed309d"
            ]
        ]
    },
    {
        "id": "b06f5e5a92639a23",
        "type": "debug",
        "z": "6d74585e23cec175",
        "g": "dd92acadfe942d07",
        "name": "hublive_print incoming msg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 880,
        "wires": []
    },
    {
        "id": "9ba963412c450794",
        "type": "function",
        "z": "6d74585e23cec175",
        "g": "dd92acadfe942d07",
        "name": "Split if Array",
        "func": "// Check if the payload is an array\nif (Array.isArray(msg.payload)) {\n    // If it's an array, process each element\n    let messages = msg.payload.map(data => {\n        // If data is a JSON string, parse it\n        if (typeof data === \"string\") {\n            try {\n                data = JSON.parse(data);\n            } catch (error) {\n                node.warn(\"Invalid JSON format: \" + data);\n                return null; // Skip invalid entries\n            }\n        }\n        return { payload: data };\n    });\n\n    // Remove any null (invalid) messages\n    messages = messages.filter(msg => msg !== null);\n\n    return [messages];  // Return an array of messages\n\n} else {\n    // If the payload is not an array (it's a single object), process it\n    if (typeof msg.payload === \"string\") {\n        try {\n            msg.payload = JSON.parse(msg.payload); // Try parsing if it's a string\n        } catch (error) {\n            node.warn(\"Invalid JSON format: \" + msg.payload);\n            return null; // Skip if invalid JSON\n        }\n    }\n\n    // Return the single message as an array (so it can be processed like an array)\n    return [{ payload: msg.payload }];\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 920,
        "wires": [
            [
                "44e186b03635db82"
            ]
        ]
    },
    {
        "id": "44e186b03635db82",
        "type": "function",
        "z": "6d74585e23cec175",
        "g": "dd92acadfe942d07",
        "name": "ParseFunction",
        "func": "// If the message comes from the ui_switch node, it will have a boolean payload.\nif (typeof msg.payload === \"boolean\") {\n    // Update the flow context variable \"hubLog\" with the new switch state.\n    flow.set(\"hubLog\", msg.payload);\n    // Do not pass any further message.\n    return null;\n}\n\n// Get the current logging state (defaults to false if not set)\nvar hubLog = flow.get(\"hubLog\") || false;\n\n// If logging is disabled, do not process the sensor data.\nif (!hubLog) {\n    return null;\n}\n\nlet data = msg.payload;\n\n// Only proceed if data.validtime === true\nif (data.validtime !== true) {\n    // Stop processing and do not send a message forward\n    return null;\n}\n\n// If validtime is true, build your message\nlet message = {\n    HDOP: parseFloat(data.HDOP) || null,\n    alt: parseFloat(data.alt) || null,\n    nSat: parseInt(data.nSat, 10) || null,\n    SOG: parseFloat(data.SOG) || null,\n    lat: parseFloat(data.lat) || null,\n    long: parseFloat(data.long) || null,\n    fixQ: parseInt(data.fixQ, 10) || null,\n    validtime: data.validtime === true ? 1 : 0,\n    COG: data.COG || \"\",\n    status: data.status || \"\",\n    time: new Date(data.datetime).getTime() || null\n};\n\nmsg.payload = message;\nmsg.measurement = data.id;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 920,
        "wires": [
            [
                "0dcfc7573f99a075",
                "c78ba9ebc6351983"
            ]
        ]
    },
    {
        "id": "c78ba9ebc6351983",
        "type": "influxdb out",
        "z": "6d74585e23cec175",
        "g": "dd92acadfe942d07",
        "influxdb": "120a1faa40e58151",
        "name": "InfluxDB_In",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "myorg",
        "bucket": "HubLog",
        "x": 910,
        "y": 920,
        "wires": []
    },
    {
        "id": "0dcfc7573f99a075",
        "type": "debug",
        "z": "6d74585e23cec175",
        "g": "dd92acadfe942d07",
        "name": "print influxDB input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 880,
        "wires": []
    },
    {
        "id": "2941dd882c426227",
        "type": "mqtt in",
        "z": "6d74585e23cec175",
        "g": "587299b4e14e6e2e",
        "name": "buoyelive",
        "topic": "buoylive",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4288dd7f10ed06f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 380,
        "wires": [
            [
                "39245c2889d1022b",
                "9f9c54325ee2de7a",
                "cd3a16086bed309d",
                "f97db8a8cab0adea"
            ]
        ]
    },
    {
        "id": "39245c2889d1022b",
        "type": "debug",
        "z": "6d74585e23cec175",
        "g": "587299b4e14e6e2e",
        "name": "buoylive_print incoming msg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 440,
        "wires": []
    },
    {
        "id": "30864c1af38deb84",
        "type": "debug",
        "z": "6d74585e23cec175",
        "g": "587299b4e14e6e2e",
        "name": "print influxDB input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 360,
        "wires": []
    },
    {
        "id": "5a8cab427fbf053d",
        "type": "function",
        "z": "6d74585e23cec175",
        "g": "587299b4e14e6e2e",
        "name": "ParseFunction",
        "func": "let data = msg.payload;\n\n// Only proceed if data.validtime === true\nif (data.validtime !== true) {\n    // Stop processing and do not send a message forward\n    return null;\n}\n\n// If validtime is true, build your message\nlet message = {\n    batvolt: parseFloat(data.batvolt) || null,\n    batperc: parseFloat(data.batperc) || null,\n    HDOP: parseFloat(data.HDOP) || null,\n    alt: parseFloat(data.alt) || null,\n    nSat: parseInt(data.nSat, 10) || null,\n    SOG: parseFloat(data.SOG) || null,\n    lat: parseFloat(data.lat) || null,\n    long: parseFloat(data.long) || null,\n    fixQ: parseInt(data.fixQ, 10) || null,\n    validtime: data.validtime === true ? 1 : 0,\n    COG: data.COG || null,\n    status: data.status || null,\n    time: new Date(data.datetime).getTime() || null,\n    id: data.id || null\n};\n\nmsg.payload = message;\nmsg.measurement = data.id;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 380,
        "wires": [
            [
                "30864c1af38deb84",
                "15b762db0240444e"
            ]
        ]
    },
    {
        "id": "15b762db0240444e",
        "type": "influxdb out",
        "z": "6d74585e23cec175",
        "g": "587299b4e14e6e2e",
        "influxdb": "120a1faa40e58151",
        "name": "InfluxDB_In",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "myorg",
        "bucket": "BuoyLog",
        "x": 910,
        "y": 400,
        "wires": []
    },
    {
        "id": "9f9c54325ee2de7a",
        "type": "function",
        "z": "6d74585e23cec175",
        "g": "587299b4e14e6e2e",
        "name": "Split if Array",
        "func": "// Check if the payload is an array\nif (Array.isArray(msg.payload)) {\n    // If it's an array, process each element\n    let messages = msg.payload.map(data => {\n        // If data is a JSON string, parse it\n        if (typeof data === \"string\") {\n            try {\n                data = JSON.parse(data);\n            } catch (error) {\n                node.warn(\"Invalid JSON format: \" + data);\n                return null; // Skip invalid entries\n            }\n        }\n        return { payload: data };\n    });\n\n    // Remove any null (invalid) messages\n    messages = messages.filter(msg => msg !== null);\n\n    return [messages];  // Return an array of messages\n\n} else {\n    // If the payload is not an array (it's a single object), process it\n    if (typeof msg.payload === \"string\") {\n        try {\n            msg.payload = JSON.parse(msg.payload); // Try parsing if it's a string\n        } catch (error) {\n            node.warn(\"Invalid JSON format: \" + msg.payload);\n            return null; // Skip if invalid JSON\n        }\n    }\n\n    // Return the single message as an array (so it can be processed like an array)\n    return [{ payload: msg.payload }];\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 380,
        "wires": [
            [
                "5a8cab427fbf053d"
            ]
        ]
    },
    {
        "id": "90f859a9403b51b5",
        "type": "comment",
        "z": "6d74585e23cec175",
        "g": "587299b4e14e6e2e",
        "name": "Buoylive msg to InfluxDB",
        "info": "",
        "x": 210,
        "y": 320,
        "wires": []
    },
    {
        "id": "201762c612e26fe1",
        "type": "comment",
        "z": "6d74585e23cec175",
        "g": "46e9239769858e9b",
        "name": "Boatlive msg to InfluxDB",
        "info": "",
        "x": 210,
        "y": 100,
        "wires": []
    },
    {
        "id": "2f4a1d9ce62d199b",
        "type": "comment",
        "z": "6d74585e23cec175",
        "g": "566772339dea8365",
        "name": "Count messages",
        "info": "",
        "x": 180,
        "y": 640,
        "wires": []
    },
    {
        "id": "cdb00d31df0e811e",
        "type": "comment",
        "z": "6d74585e23cec175",
        "g": "dd92acadfe942d07",
        "name": "Hublive msg to InfluxDB",
        "info": "",
        "x": 210,
        "y": 840,
        "wires": []
    },
    {
        "id": "3445948354b61f97",
        "type": "debug",
        "z": "7805de2be92eb497",
        "g": "48fc0fb0e591b49a",
        "name": "print http request response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 180,
        "wires": []
    },
    {
        "id": "4912862498d078a1",
        "type": "function",
        "z": "7805de2be92eb497",
        "g": "48fc0fb0e591b49a",
        "name": "Create msg",
        "func": "// Extract the `_value` field from each object and create an array of messages\nlet messages = msg.payload.map(item => {\n    return { payload: { device: item._value } };\n});\n\n// Return multiple messages (one per device)\nreturn [messages];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 260,
        "wires": [
            [
                "5f75bd5addcd2a4b"
            ]
        ]
    },
    {
        "id": "a5adbef194bd7434",
        "type": "ui_table",
        "z": "7805de2be92eb497",
        "g": "48fc0fb0e591b49a",
        "group": "a3fb06f46f46e5a5",
        "name": "Table sync status",
        "order": 3,
        "width": "8",
        "height": "4",
        "columns": [
            {
                "field": "",
                "title": "",
                "width": "5%",
                "align": "left",
                "formatter": "rownum",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "id",
                "title": "id",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "lastSync",
                "title": "lastSync",
                "width": "50%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "status",
                "title": "Status",
                "width": "20%",
                "align": "left",
                "formatter": "color",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1570,
        "y": 320,
        "wires": []
    },
    {
        "id": "3d58aabd91ca1a35",
        "type": "function",
        "z": "7805de2be92eb497",
        "g": "48fc0fb0e591b49a",
        "name": "Create/ update table",
        "func": "// Retrieve the existing table data from context storage\nlet tableData = context.get(\"tableData\") || [];\n\n// Ensure msg.payload is valid\nif (!msg.payload || !msg.payload.status) {\n    node.warn(\"Invalid payload received\");\n    return;\n}\n\n// Extract the device ID from the HTTP response\nlet deviceId = msg.payload.id || msg.payload.device || msg.device || \"Unknown Device\";\n\n// Ensure the device ID is formatted correctly\ndeviceId = deviceId.replace(\".local\", \"\");\n\n// Get sync status from the HTTP response\nlet status = msg.payload.status;  // \"success\" or \"error\"\n\n// Format timestamp in German format (DD.MM.YYYY HH:MM:SS)\nlet timestamp = new Date().toLocaleString(\"de-DE\", {\n    day: \"2-digit\",\n    month: \"2-digit\",\n    year: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\"\n});\n\n// Determine color: Green if success, Red if error\nlet color = (status === \"success\") ? \"#00FF00\" : \"#FF0000\";\n\n// Check if the device already exists in the table\nlet existingIndex = tableData.findIndex(entry => entry.id === deviceId);\n\nif (existingIndex !== -1) {\n    // Update existing entry\n    let lastSync = tableData[existingIndex].lastSync || \"No succesfull sync\";\n\n    if (status === \"success\") {\n        lastSync = timestamp;  // Only update timestamp if sync was successful\n    }\n\n    tableData[existingIndex] = {\n        id: deviceId,\n        lastSync: lastSync,\n        status: color\n    };\n} else {\n    // Add new device entry\n    tableData.push({\n        id: deviceId,\n        lastSync: status === \"success\" ? timestamp : \"No succesfull sync\",\n        status: color\n    });\n}\n\n// Store the updated table data in context\ncontext.set(\"tableData\", tableData);\n\n// **Force refresh by sending an empty payload first**\nnode.send({ payload: [] });\n\n// Wait 50ms and then send the updated table data\nsetTimeout(() => {\n    node.send({ payload: tableData });\n}, 50);\n\n// Do not return msg, as we are sending two separate messages\nreturn;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 240,
        "wires": [
            [
                "a5adbef194bd7434"
            ]
        ]
    },
    {
        "id": "4145d2c39de12387",
        "type": "function",
        "z": "7805de2be92eb497",
        "g": "48fc0fb0e591b49a",
        "name": "Count devices",
        "func": "// Count the number of devices\nlet deviceCount = msg.payload.length;\n\n// Return the count as payload\nmsg.payload = { device_count: deviceCount };\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 200,
        "wires": [
            [
                "fcdd659999154936"
            ]
        ]
    },
    {
        "id": "fcdd659999154936",
        "type": "ui_text",
        "z": "7805de2be92eb497",
        "g": "48fc0fb0e591b49a",
        "group": "a3fb06f46f46e5a5",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Devices connected",
        "format": "{{msg.payload.device_count}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1230,
        "y": 200,
        "wires": []
    },
    {
        "id": "215ce34c4faf7d2d",
        "type": "inject",
        "z": "7805de2be92eb497",
        "g": "48fc0fb0e591b49a",
        "name": "Auto Trigger Every 5min",
        "props": [],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "x": 210,
        "y": 260,
        "wires": [
            [
                "e5656e2047253b8e"
            ]
        ]
    },
    {
        "id": "e5656e2047253b8e",
        "type": "ui_switch",
        "z": "7805de2be92eb497",
        "g": "48fc0fb0e591b49a",
        "name": "Hub - Rsync Tracker",
        "label": "Hub - Rsync Tracker",
        "tooltip": "",
        "group": "304ab8b1ec1b10bc",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 460,
        "y": 240,
        "wires": [
            [
                "fc62b17ffd6c6aad"
            ]
        ]
    },
    {
        "id": "fc62b17ffd6c6aad",
        "type": "influxdb in",
        "z": "7805de2be92eb497",
        "g": "48fc0fb0e591b49a",
        "influxdb": "120a1faa40e58151",
        "name": "Fetch Devices from InfluxDB",
        "query": "import \"influxdata/influxdb/schema\"\nschema.measurements(bucket: \"Status\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "myorg",
        "x": 720,
        "y": 240,
        "wires": [
            [
                "4145d2c39de12387",
                "4912862498d078a1"
            ]
        ]
    },
    {
        "id": "e5cdda1f0ecefa11",
        "type": "inject",
        "z": "7805de2be92eb497",
        "g": "48fc0fb0e591b49a",
        "name": "Default true on startup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 200,
        "y": 220,
        "wires": [
            [
                "e5656e2047253b8e"
            ]
        ]
    },
    {
        "id": "5f75bd5addcd2a4b",
        "type": "http request",
        "z": "7805de2be92eb497",
        "g": "48fc0fb0e591b49a",
        "name": "http request to nodered support api",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://172.17.0.1:5000/rsync",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1260,
        "y": 260,
        "wires": [
            [
                "3445948354b61f97",
                "3d58aabd91ca1a35"
            ]
        ]
    },
    {
        "id": "c15dcdfa6da3de50",
        "type": "ui_button",
        "z": "7805de2be92eb497",
        "g": "48fc0fb0e591b49a",
        "name": "",
        "group": "a3fb06f46f46e5a5",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Sync Now",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 430,
        "y": 320,
        "wires": [
            [
                "fc62b17ffd6c6aad"
            ]
        ]
    },
    {
        "id": "54a7d120b0ed8d8a",
        "type": "comment",
        "z": "7805de2be92eb497",
        "g": "48fc0fb0e591b49a",
        "name": "Rsnyc - Log transfer",
        "info": "",
        "x": 150,
        "y": 160,
        "wires": []
    },
    {
        "id": "18692c41c83f4091",
        "type": "ui_button",
        "z": "42fedc37cdaa024d",
        "g": "6c66380b5d3206b6",
        "name": "",
        "group": "bfa8af220bdc2c3c",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete archive",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 280,
        "y": 980,
        "wires": [
            [
                "63dc9cb990257c6c"
            ]
        ]
    },
    {
        "id": "63dc9cb990257c6c",
        "type": "exec",
        "z": "42fedc37cdaa024d",
        "g": "6c66380b5d3206b6",
        "command": "find /data/dataexport/archive -mindepth 1 -delete",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Delete /dataexport/archive",
        "x": 640,
        "y": 980,
        "wires": [
            [],
            [],
            [
                "2c16b294d3d7c4e8"
            ]
        ]
    },
    {
        "id": "b59c4f02f68f7f5b",
        "type": "ui_button",
        "z": "42fedc37cdaa024d",
        "g": "6c66380b5d3206b6",
        "name": "",
        "group": "bfa8af220bdc2c3c",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete rsync data",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 290,
        "y": 920,
        "wires": [
            [
                "327baeadee3896d7"
            ]
        ]
    },
    {
        "id": "327baeadee3896d7",
        "type": "exec",
        "z": "42fedc37cdaa024d",
        "g": "6c66380b5d3206b6",
        "command": "find /data/datarsync/ -mindepth 1 -delete",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Delete /datarsync",
        "x": 610,
        "y": 920,
        "wires": [
            [],
            [],
            [
                "ed739cd0dcbd5868"
            ]
        ]
    },
    {
        "id": "f59ecf14f5932959",
        "type": "ui_text",
        "z": "42fedc37cdaa024d",
        "g": "6c66380b5d3206b6",
        "group": "bfa8af220bdc2c3c",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "DeleteStatus",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1190,
        "y": 940,
        "wires": []
    },
    {
        "id": "2c16b294d3d7c4e8",
        "type": "function",
        "z": "42fedc37cdaa024d",
        "g": "6c66380b5d3206b6",
        "name": "Check response",
        "func": "// Clone the original msg so we don't overwrite any properties we might need later\nlet newMsg = RED.util.cloneMessage(msg);\n\nif (msg.payload.code === 0) {\n    newMsg.payload = \"dataexport/archive deleted!\";\n} else if (msg.payload.code === 1) {\n    let errorMsg = msg.payload.message || \"Unknown error\";\n\n    // Check if error is \"No such file or directory\"\n    if (errorMsg.includes(\"No such file or directory\")) {\n        newMsg.payload = \"Error: No directory found!\";\n    } else {\n        newMsg.payload = \"Error: \" + errorMsg;\n    }\n} else {\n    // If code is neither 0 nor 1, handle as an unknown error (optional)\n    newMsg.payload = \"Error: Unexpected code.\";\n}\n\n// Send the result immediately\nnode.send(newMsg);\n\n// After 5 seconds, send a new message with an empty payload to reset the UI text\nsetTimeout(() => {\n    node.send({ payload: \"\" });\n}, 5000);\n\n// Do not return newMsg again; we've already sent it\nreturn;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 980,
        "wires": [
            [
                "f59ecf14f5932959"
            ]
        ]
    },
    {
        "id": "ed739cd0dcbd5868",
        "type": "function",
        "z": "42fedc37cdaa024d",
        "g": "6c66380b5d3206b6",
        "name": "Check response",
        "func": "// Clone the original msg so we don't overwrite any properties we might need later\nlet newMsg = RED.util.cloneMessage(msg);\n\nif (msg.payload.code === 0) {\n    newMsg.payload = \"datarsync deleted!\";\n} else if (msg.payload.code === 1) {\n    let errorMsg = msg.payload.message || \"Unknown error\";\n\n    // Check if error is \"No such file or directory\"\n    if (errorMsg.includes(\"No such file or directory\")) {\n        newMsg.payload = \"Error: No directory found!\";\n    } else {\n        newMsg.payload = \"Error: \" + errorMsg;\n    }\n} else {\n    // If code is neither 0 nor 1, handle as an unknown error (optional)\n    newMsg.payload = \"Error: Unexpected code.\";\n}\n\n// Send the result immediately\nnode.send(newMsg);\n\n// After 5 seconds, send a new message with an empty payload to reset the UI text\nsetTimeout(() => {\n    node.send({ payload: \"\" });\n}, 5000);\n\n// Do not return newMsg again; we've already sent it\nreturn;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 920,
        "wires": [
            [
                "f59ecf14f5932959",
                "ace358512031ba44"
            ]
        ]
    },
    {
        "id": "b81ff69465a7dc4f",
        "type": "ui_button",
        "z": "42fedc37cdaa024d",
        "g": "6c66380b5d3206b6",
        "name": "Delete analysis data (dataexport)",
        "group": "bfa8af220bdc2c3c",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete analysis data",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 340,
        "y": 1040,
        "wires": [
            [
                "90eaf42c144b5c03"
            ]
        ]
    },
    {
        "id": "90eaf42c144b5c03",
        "type": "exec",
        "z": "42fedc37cdaa024d",
        "g": "6c66380b5d3206b6",
        "command": "find /data/dataexport -maxdepth 1 -type f -delete",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Delete /dataexport",
        "x": 610,
        "y": 1040,
        "wires": [
            [],
            [],
            [
                "e3584ca79577c844"
            ]
        ]
    },
    {
        "id": "e3584ca79577c844",
        "type": "function",
        "z": "42fedc37cdaa024d",
        "g": "6c66380b5d3206b6",
        "name": "Check response",
        "func": "// Clone the original msg so we don't overwrite any properties we might need later\nlet newMsg = RED.util.cloneMessage(msg);\n\nif (msg.payload.code === 0) {\n    newMsg.payload = \"dataexport files deleted!\";\n} else if (msg.payload.code === 1) {\n    let errorMsg = msg.payload.message || \"Unknown error\";\n\n    // Check if error is \"No such file or directory\"\n    if (errorMsg.includes(\"No such file or directory\")) {\n        newMsg.payload = \"Error: No directory found!\";\n    } else {\n        newMsg.payload = \"Error: \" + errorMsg;\n    }\n} else {\n    // If code is neither 0 nor 1, handle as an unknown error (optional)\n    newMsg.payload = \"Error: Unexpected code.\";\n}\n\n// Send the result immediately\nnode.send(newMsg);\n\n// After 5 seconds, send a new message with an empty payload to reset the UI text\nsetTimeout(() => {\n    node.send({ payload: \"\" });\n}, 5000);\n\n// Do not return newMsg again; we've already sent it\nreturn;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1040,
        "wires": [
            [
                "f59ecf14f5932959"
            ]
        ]
    },
    {
        "id": "ace358512031ba44",
        "type": "function",
        "z": "42fedc37cdaa024d",
        "g": "6c66380b5d3206b6",
        "name": "Clear table",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "8c134f872ad27ff6",
        "type": "comment",
        "z": "42fedc37cdaa024d",
        "g": "6c66380b5d3206b6",
        "name": "Delete data",
        "info": "",
        "x": 270,
        "y": 860,
        "wires": []
    },
    {
        "id": "8290fac13c8012ea",
        "type": "exec",
        "z": "42fedc37cdaa024d",
        "g": "2792d2a602160f2e",
        "command": "ls -1 /data/datarsync | grep 'datalog_boat.*\\.db'",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "List DB Files",
        "x": 570,
        "y": 220,
        "wires": [
            [
                "a144854534600778"
            ],
            [],
            []
        ]
    },
    {
        "id": "a144854534600778",
        "type": "function",
        "z": "42fedc37cdaa024d",
        "g": "2792d2a602160f2e",
        "name": "SplitMessages",
        "func": "// Ensure msg.payload is valid\nif (!msg.payload || typeof msg.payload !== \"string\") {\n    node.warn(\"Invalid payload received\");\n    return null;\n}\n\n// Trim output and split by newline in case of multiple filenames\nlet filenames = msg.payload.trim().split(\"\\n\");\n\n// Filter out any empty values and invalid filenames\nfilenames = filenames.filter(name => name.startsWith(\"datalog_\") && name.endsWith(\".db\"));\n\n// Generate an array of messages\nlet messages = filenames.map(name => ({ payload: { filename: name } }));\n\n// Send each filename as a separate message\nreturn [messages];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 260,
        "wires": [
            [
                "a468172b79ab6ff8",
                "e3897585698f5239",
                "68b214c161394368"
            ]
        ]
    },
    {
        "id": "233c3ea8994614bf",
        "type": "http request",
        "z": "42fedc37cdaa024d",
        "g": "2792d2a602160f2e",
        "name": "Trigger Export via API",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://172.17.0.1:5000/exportboattracker",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1200,
        "y": 220,
        "wires": [
            [
                "f98884b12536eb0e",
                "7ef08dfced2acb79"
            ]
        ]
    },
    {
        "id": "9d110852a9290478",
        "type": "ui_button",
        "z": "42fedc37cdaa024d",
        "g": "2792d2a602160f2e",
        "name": "",
        "group": "7b134827c965229c",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Create BoatTracker Analysis files",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "reset",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 340,
        "y": 180,
        "wires": [
            [
                "8290fac13c8012ea",
                "7ef08dfced2acb79"
            ]
        ]
    },
    {
        "id": "64957892fe9fad7f",
        "type": "ui_table",
        "z": "42fedc37cdaa024d",
        "g": "2792d2a602160f2e",
        "group": "7b134827c965229c",
        "name": "Export Status Table BoatTracker",
        "order": 1,
        "width": 0,
        "height": 0,
        "columns": [
            {
                "field": "id",
                "title": "Device",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "lastSync",
                "title": "Last sync",
                "width": "50%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "status",
                "title": "Status",
                "width": "20%",
                "align": "left",
                "formatter": "color",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1450,
        "y": 160,
        "wires": []
    },
    {
        "id": "7ef08dfced2acb79",
        "type": "function",
        "z": "42fedc37cdaa024d",
        "g": "2792d2a602160f2e",
        "name": "Update table",
        "func": "// -----  Update table  -----\n/*\n *  Receives:\n *     – {payload:{filename:\"datalog_boat1.db\"}}             ← SplitMessages\n *     – {payload:{filename:\"datalog_boat1.db\",status:\"success\"| \"error\"}}\n *                                                         ← API response\n *     – \"reset\"                                           ← clears the stored table\n *\n *  Keeps an array in flow context (so it survives redeploys) and\n *  ALWAYS sends a *fresh copy* of that array to ui_table.\n */\n\nconst colourMap = { success: \"#00FF00\", error: \"#FF0000\", processing: \"#FFFF00\" };\nconst now = () =>\n    new Date().toLocaleString(\"de-DE\", {\n        day: \"2-digit\",\n        month: \"2-digit\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n    });\n\n// ------------------------------------------------------------------\n// 0) Check for table reset command\n// ------------------------------------------------------------------\nif (msg.payload === \"reset\") {\n    flow.set(\"exportTableBoat\", []);  // clear the table in context\n    msg.payload = [];                 // send empty table to ui_table\n    return msg;                       // skip further processing\n}\n\n// ------------------------------------------------------------------\n// 1) Decode the incoming message\n// ------------------------------------------------------------------\nif (!msg.payload) return null;\n\nlet filename, status;\nif (typeof msg.payload === \"object\") {\n    filename = msg.payload.filename;\n    status = (msg.payload.status || \"processing\").toLowerCase();\n} else if (typeof msg.payload === \"string\") {\n    filename = msg.payload;\n    status = \"processing\";\n}\nif (!filename) return null;\n\n// deviceId = “boat1”, “boat2”, …\nconst m = filename.match(/^datalog_(.+)\\.db$/);\nconst deviceId = m ? m[1] : filename;\n\n// ------------------------------------------------------------------\n// 2) Load existing table and build/merge the row\n// ------------------------------------------------------------------\nlet table = flow.get(\"exportTableBoat\") || [];\n\nconst ts = now();\nconst colour = colourMap[status] || \"#CCCCCC\";\nconst lastSyn = status === \"processing\" ? \"in progress\" : ts;\n\nconst row = { id: deviceId, lastSync: lastSyn, status: colour };\n\nconst idx = table.findIndex(r => r.id === deviceId);\nif (idx === -1) {\n    table.push(row);\n} else {\n    // Replace the whole row → gives us a NEW object reference\n    table[idx] = row;\n}\n\n// ------------------------------------------------------------------\n// 3) Store and emit – **always send a new array instance!**\n// ------------------------------------------------------------------\nflow.set(\"exportTableBoat\", table);\nmsg.payload = table.map(r => ({ ...r }));   // shallow copy = new reference\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 160,
        "wires": [
            [
                "64957892fe9fad7f"
            ]
        ]
    },
    {
        "id": "f98884b12536eb0e",
        "type": "debug",
        "z": "42fedc37cdaa024d",
        "g": "2792d2a602160f2e",
        "name": "result API",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 220,
        "wires": []
    },
    {
        "id": "a468172b79ab6ff8",
        "type": "debug",
        "z": "42fedc37cdaa024d",
        "g": "2792d2a602160f2e",
        "name": "result splitmessages",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 260,
        "wires": []
    },
    {
        "id": "e3897585698f5239",
        "type": "delay",
        "z": "42fedc37cdaa024d",
        "g": "2792d2a602160f2e",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 920,
        "y": 200,
        "wires": [
            [
                "7ef08dfced2acb79"
            ]
        ]
    },
    {
        "id": "a163fdf7837af9e4",
        "type": "comment",
        "z": "42fedc37cdaa024d",
        "g": "2792d2a602160f2e",
        "name": "BoatTracker - Create Analysis files",
        "info": "",
        "x": 340,
        "y": 140,
        "wires": []
    },
    {
        "id": "b43be1186c2fcd0a",
        "type": "exec",
        "z": "42fedc37cdaa024d",
        "g": "8d79760159f30992",
        "command": "ls -1 /data/datarsync | grep 'datalog_buoy.*\\.db'",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "List DB Files",
        "x": 630,
        "y": 460,
        "wires": [
            [
                "89e1d1081aa3a904"
            ],
            [],
            []
        ]
    },
    {
        "id": "89e1d1081aa3a904",
        "type": "function",
        "z": "42fedc37cdaa024d",
        "g": "8d79760159f30992",
        "name": "SplitMessages",
        "func": "// Ensure msg.payload is valid\nif (!msg.payload || typeof msg.payload !== \"string\") {\n    node.warn(\"Invalid payload received\");\n    return null;\n}\n\n// Trim output and split by newline in case of multiple filenames\nlet filenames = msg.payload.trim().split(\"\\n\");\n\n// Filter out any empty values and invalid filenames\nfilenames = filenames.filter(name => name.startsWith(\"datalog_\") && name.endsWith(\".db\"));\n\n// Generate an array of messages\nlet messages = filenames.map(name => ({ payload: { filename: name } }));\n\n// Send each filename as a separate message\nreturn [messages];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 500,
        "wires": [
            [
                "2b9687b42ad51aa1",
                "422e381738a9ced3",
                "7186c5f47220f6e7"
            ]
        ]
    },
    {
        "id": "eac1929312bfb0f0",
        "type": "http request",
        "z": "42fedc37cdaa024d",
        "g": "8d79760159f30992",
        "name": "Trigger Export via API",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://172.17.0.1:5000/exportbuoytracker",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1240,
        "y": 460,
        "wires": [
            [
                "ce300dffac3f54e1",
                "370f867cc348f3b8"
            ]
        ]
    },
    {
        "id": "866b542e3aa7868e",
        "type": "ui_button",
        "z": "42fedc37cdaa024d",
        "g": "8d79760159f30992",
        "name": "",
        "group": "eeb2df40f0865d75",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Create BuoyTracker Analysis files",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "reset",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 340,
        "y": 420,
        "wires": [
            [
                "b43be1186c2fcd0a",
                "370f867cc348f3b8",
                "1a539c4825a5f75e"
            ]
        ]
    },
    {
        "id": "90750f6b1b7a2130",
        "type": "ui_table",
        "z": "42fedc37cdaa024d",
        "g": "8d79760159f30992",
        "group": "eeb2df40f0865d75",
        "name": "Export Status Table BuoyTracker",
        "order": 1,
        "width": 0,
        "height": 0,
        "columns": [
            {
                "field": "id",
                "title": "Device",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "lastSync",
                "title": "Last sync",
                "width": "50%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "status",
                "title": "Status",
                "width": "20%",
                "align": "left",
                "formatter": "color",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1420,
        "y": 400,
        "wires": []
    },
    {
        "id": "370f867cc348f3b8",
        "type": "function",
        "z": "42fedc37cdaa024d",
        "g": "8d79760159f30992",
        "name": "Update table",
        "func": "// -----  Update table  -----\n/*\n *  Receives:\n *     – {payload:{filename:\"datalog_boat1.db\"}}             ← SplitMessages\n *     – {payload:{filename:\"datalog_boat1.db\",status:\"success\"| \"error\"}}\n *                                                         ← API response\n *     – \"reset\"                                           ← clears the stored table\n *\n *  Keeps an array in flow context (so it survives redeploys) and\n *  ALWAYS sends a *fresh copy* of that array to ui_table.\n */\n\nconst colourMap = { success: \"#00FF00\", error: \"#FF0000\", processing: \"#FFFF00\" };\nconst now = () =>\n    new Date().toLocaleString(\"de-DE\", {\n        day: \"2-digit\",\n        month: \"2-digit\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n    });\n\n// ------------------------------------------------------------------\n// 0) Check for table reset command\n// ------------------------------------------------------------------\nif (msg.payload === \"reset\") {\n    flow.set(\"exportTableBuoy\", []);  // clear the table in context\n    msg.payload = [];                 // send empty table to ui_table\n    return msg;                       // skip further processing\n}\n\n// ------------------------------------------------------------------\n// 1) Decode the incoming message\n// ------------------------------------------------------------------\nif (!msg.payload) return null;\n\nlet filename, status;\nif (typeof msg.payload === \"object\") {\n    filename = msg.payload.filename;\n    status = (msg.payload.status || \"processing\").toLowerCase();\n} else if (typeof msg.payload === \"string\") {\n    filename = msg.payload;\n    status = \"processing\";\n}\nif (!filename) return null;\n\n// deviceId = “boat1”, “boat2”, …\nconst m = filename.match(/^datalog_(.+)\\.db$/);\nconst deviceId = m ? m[1] : filename;\n\n// ------------------------------------------------------------------\n// 2) Load existing table and build/merge the row\n// ------------------------------------------------------------------\nlet table = flow.get(\"exportTableBuoy\") || [];\n\nconst ts = now();\nconst colour = colourMap[status] || \"#CCCCCC\";\nconst lastSyn = status === \"processing\" ? \"in progress\" : ts;\n\nconst row = { id: deviceId, lastSync: lastSyn, status: colour };\n\nconst idx = table.findIndex(r => r.id === deviceId);\nif (idx === -1) {\n    table.push(row);\n} else {\n    // Replace the whole row → gives us a NEW object reference\n    table[idx] = row;\n}\n\n// ------------------------------------------------------------------\n// 3) Store and emit – **always send a new array instance!**\n// ------------------------------------------------------------------\nflow.set(\"exportTableBuoy\", table);\nmsg.payload = table.map(r => ({ ...r }));   // shallow copy = new reference\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 400,
        "wires": [
            [
                "90750f6b1b7a2130"
            ]
        ]
    },
    {
        "id": "ce300dffac3f54e1",
        "type": "debug",
        "z": "42fedc37cdaa024d",
        "g": "8d79760159f30992",
        "name": "result API",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 460,
        "wires": []
    },
    {
        "id": "2b9687b42ad51aa1",
        "type": "debug",
        "z": "42fedc37cdaa024d",
        "g": "8d79760159f30992",
        "name": "result splitmessages",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 500,
        "wires": []
    },
    {
        "id": "422e381738a9ced3",
        "type": "delay",
        "z": "42fedc37cdaa024d",
        "g": "8d79760159f30992",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 980,
        "y": 440,
        "wires": [
            [
                "370f867cc348f3b8"
            ]
        ]
    },
    {
        "id": "d85c0829cddab410",
        "type": "comment",
        "z": "42fedc37cdaa024d",
        "g": "8d79760159f30992",
        "name": "BuoyTracker - Create Analysis files",
        "info": "",
        "x": 340,
        "y": 380,
        "wires": []
    },
    {
        "id": "1a539c4825a5f75e",
        "type": "exec",
        "z": "42fedc37cdaa024d",
        "g": "8d79760159f30992",
        "command": "ls -1 /data/datarsync | grep 'datalog_hub.*\\.db'",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "List DB Files",
        "x": 630,
        "y": 520,
        "wires": [
            [
                "89e1d1081aa3a904"
            ],
            [],
            []
        ]
    },
    {
        "id": "68b214c161394368",
        "type": "delay",
        "z": "42fedc37cdaa024d",
        "g": "2792d2a602160f2e",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 960,
        "y": 240,
        "wires": [
            [
                "233c3ea8994614bf"
            ]
        ]
    },
    {
        "id": "7186c5f47220f6e7",
        "type": "delay",
        "z": "42fedc37cdaa024d",
        "g": "8d79760159f30992",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1040,
        "y": 480,
        "wires": [
            [
                "eac1929312bfb0f0"
            ]
        ]
    },
    {
        "id": "2c0732fe0a38b28f",
        "type": "ui_button",
        "z": "42fedc37cdaa024d",
        "g": "6c66380b5d3206b6",
        "name": "Delete MarkerComments data",
        "group": "bfa8af220bdc2c3c",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete MarkerComments data",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 330,
        "y": 1120,
        "wires": [
            [
                "3fdc993e17dfb4f7"
            ]
        ]
    },
    {
        "id": "3fdc993e17dfb4f7",
        "type": "function",
        "z": "42fedc37cdaa024d",
        "g": "6c66380b5d3206b6",
        "name": "Build Delete Request",
        "func": "const measurements = [\"Comments\", \"Marker\", \"Events\"];\n\nconst authHeader = {\n  \"Authorization\": \"Token KU_NNh_SQTd1dUo5uUQaJohLrZO833cGSN_AefNYMR6vxfQkPiW6NWSvxohF729BB82y5H9hhcrAgngGuhTiZQ==\",\n  \"Content-Type\": \"application/json\"\n};\n\nconst url = \"http://172.17.0.1:8087/api/v2/delete?org=myorg&bucket=MarkerComments\";\n\nconst start = \"1970-01-01T00:00:00Z\";\nconst stop = new Date().toISOString();\n\nlet msgs = measurements.map(name => {\n  return {\n    method: \"POST\",\n    url: url,\n    headers: authHeader,\n    payload: {\n      start: start,\n      stop: stop,\n      predicate: `_measurement=\"${name}\"`\n    }\n  };\n});\n\nreturn [msgs];\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1120,
        "wires": [
            [
                "2ef1a589cb5f38d1"
            ]
        ]
    },
    {
        "id": "2ef1a589cb5f38d1",
        "type": "http request",
        "z": "42fedc37cdaa024d",
        "g": "6c66380b5d3206b6",
        "name": "Send DELETE to InfluxDB",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 890,
        "y": 1120,
        "wires": [
            [
                "4a03ef6bcaa2ab82",
                "cb8302a9ae60ccd9"
            ]
        ]
    },
    {
        "id": "4a03ef6bcaa2ab82",
        "type": "debug",
        "z": "42fedc37cdaa024d",
        "g": "6c66380b5d3206b6",
        "name": "print http response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 1140,
        "wires": []
    },
    {
        "id": "cb8302a9ae60ccd9",
        "type": "function",
        "z": "42fedc37cdaa024d",
        "g": "6c66380b5d3206b6",
        "name": "Check response",
        "func": "let newMsg = RED.util.cloneMessage(msg);\n\n// Handle 204 success\nif (msg.statusCode === 204) {\n    newMsg.payload = \"MarkerComments deleted successfully.\";\n}\n// Handle common client or server error (e.g. 400, 401, etc.)\nelse if (msg.statusCode >= 400) {\n    try {\n        let errorJson = typeof msg.payload === \"string\" ? JSON.parse(msg.payload) : msg.payload;\n        newMsg.payload = `Delete failed: ${errorJson.message || \"Unknown error\"}`;\n    } catch (e) {\n        newMsg.payload = `Delete failed: Could not parse error response.`;\n    }\n}\n// Handle unexpected status\nelse {\n    newMsg.payload = `Unexpected response code: ${msg.statusCode}`;\n}\n\n// Send status immediately\nnode.send(newMsg);\n\n// Reset UI text after 5 seconds\nsetTimeout(() => {\n    node.send({ payload: \"\" });\n}, 5000);\n\n// Don't return anything again\nreturn;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1080,
        "wires": [
            [
                "f59ecf14f5932959"
            ]
        ]
    },
    {
        "id": "c74231558c1586be",
        "type": "comment",
        "z": "42fedc37cdaa024d",
        "g": "c5cb68d4a1368b13",
        "name": "MarkerComments - Create Analysis files",
        "info": "",
        "x": 360,
        "y": 640,
        "wires": []
    },
    {
        "id": "3b6dfedf7a8da58d",
        "type": "ui_button",
        "z": "42fedc37cdaa024d",
        "g": "c5cb68d4a1368b13",
        "name": "",
        "group": "3f8e2d46c848ed8f",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Create MarkerComments Analysis files",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "reset",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 350,
        "y": 680,
        "wires": [
            [
                "696d741e8a955d5b",
                "a226232f7227aaf5"
            ]
        ]
    },
    {
        "id": "f59fddbe55147635",
        "type": "delay",
        "z": "42fedc37cdaa024d",
        "g": "c5cb68d4a1368b13",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 940,
        "y": 700,
        "wires": [
            [
                "696d741e8a955d5b"
            ]
        ]
    },
    {
        "id": "79da4b86265cc251",
        "type": "delay",
        "z": "42fedc37cdaa024d",
        "g": "c5cb68d4a1368b13",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 980,
        "y": 740,
        "wires": [
            [
                "5f347f0c931aef9c"
            ]
        ]
    },
    {
        "id": "5f347f0c931aef9c",
        "type": "http request",
        "z": "42fedc37cdaa024d",
        "g": "c5cb68d4a1368b13",
        "name": "Trigger Export via API",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://172.17.0.1:5000/exportmarkercomments",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1220,
        "y": 720,
        "wires": [
            [
                "15e800919895914b",
                "696d741e8a955d5b"
            ]
        ]
    },
    {
        "id": "696d741e8a955d5b",
        "type": "function",
        "z": "42fedc37cdaa024d",
        "g": "c5cb68d4a1368b13",
        "name": "Update table",
        "func": "// ------------  Update table (boats + buckets)  ------------\nconst colour = { success: \"#00FF00\", error: \"#FF0000\", processing: \"#FFFF00\" };\nconst now = () => new Date().toLocaleString(\"de-DE\", {\n    day: \"2-digit\", month: \"2-digit\", year: \"numeric\",\n    hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\"\n});\n\n// 0) reset?\nif (msg.payload === \"reset\") {\n    flow.set(\"exportTableBoat\", []);\n    msg.payload = [];\n    return msg;\n}\n\n// 1) normalise input  → id + status\nlet id, status = \"processing\";\n\nif (typeof msg.payload === \"string\") {          // comes directly from button\n    id = msg.payload;                           // \"MarkerComments\"\n}\nelse if (msg.payload.bucket) {                  // initial work-msg\n    id = msg.payload.bucket;                    // \"MarkerComments\"\n}\nelse if (msg.payload.filename) {                // API response\n    status = (msg.payload.status || \"processing\").toLowerCase();\n    const fn = msg.payload.filename;\n    const m = fn.match(/^datalog_(.+)\\.db$/);    // boat files\n    id = m ? m[1] : fn.split(\"_\")[0];            // bucket_yyyymmdd.html\n}\n\nif (!id) return null;                           // nothing recognised\n\n// 2) merge / insert row\nconst table = flow.get(\"exportTableMarkComments\") || [];\nconst row = {\n    id,\n    lastSync: status === \"processing\" ? \"in progress\" : now(),\n    status: colour[status] || \"#CCCCCC\"\n};\n\nconst idx = table.findIndex(r => r.id === id);\n(idx === -1) ? table.push(row) : (table[idx] = row);\n\n// 3) save & emit fresh copy\nflow.set(\"exportTableMarkComments\", table);\nmsg.payload = table.map(r => ({ ...r }));\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 660,
        "wires": [
            [
                "bd87ab2a2fc8f722"
            ]
        ]
    },
    {
        "id": "bd87ab2a2fc8f722",
        "type": "ui_table",
        "z": "42fedc37cdaa024d",
        "g": "c5cb68d4a1368b13",
        "group": "3f8e2d46c848ed8f",
        "name": "Export Status Table Other",
        "order": 1,
        "width": 0,
        "height": 0,
        "columns": [
            {
                "field": "id",
                "title": "Device",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "lastSync",
                "title": "Last sync",
                "width": "50%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "status",
                "title": "Status",
                "width": "20%",
                "align": "left",
                "formatter": "color",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1430,
        "y": 660,
        "wires": []
    },
    {
        "id": "15e800919895914b",
        "type": "debug",
        "z": "42fedc37cdaa024d",
        "g": "c5cb68d4a1368b13",
        "name": "result API",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 720,
        "wires": []
    },
    {
        "id": "a226232f7227aaf5",
        "type": "function",
        "z": "42fedc37cdaa024d",
        "g": "c5cb68d4a1368b13",
        "name": "SplitMessages",
        "func": "/*  MarkerComments – always output ONE work-message  */\n\nif (msg.payload === \"reset\") {\n    // Button just cleared the table; now kick off the export\n    msg.payload = { bucket: \"MarkerComments\" };   // → ?bucket=MarkerComments\n    return msg;                                   // one single message\n}\n\n/* fallback (should never be needed) */\nmsg.payload = { bucket: \"MarkerComments\" };\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 720,
        "wires": [
            [
                "f59fddbe55147635",
                "79da4b86265cc251"
            ]
        ]
    },
    {
        "id": "cc0fab8d88dfd52c",
        "type": "influxdb out",
        "z": "dfc6be75c29e3d81",
        "g": "bdd80abe45dfbbae",
        "influxdb": "120a1faa40e58151",
        "name": "Influx MarkerComments",
        "measurement": "Marker",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "myorg",
        "bucket": "MarkerComments",
        "x": 790,
        "y": 540,
        "wires": []
    },
    {
        "id": "45ecf11e7df1daa7",
        "type": "debug",
        "z": "dfc6be75c29e3d81",
        "g": "bdd80abe45dfbbae",
        "name": "print influxdb input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 480,
        "wires": []
    },
    {
        "id": "e28d248a8ee362b1",
        "type": "function",
        "z": "dfc6be75c29e3d81",
        "g": "164d505cef501ef2",
        "name": "Create timestamp",
        "func": "// Retrieve or initialize stored time and the \"stopped\" flag from node context\nlet currentTime = context.get(\"currentTime\") || new Date();\nlet stopped = context.get(\"stopped\") || false;\n\n// Check incoming payload\nswitch (msg.payload) {\n    case \"stoptime\":\n        // Toggle stop state\n        stopped = !stopped;\n        context.set(\"stopped\", stopped);\n        flow.set(\"timerStopped\", stopped); \n        break;\n\n    case -10:\n        // Subtract 10 seconds from current time\n        currentTime.setSeconds(currentTime.getSeconds() - 10);\n        context.set(\"currentTime\", currentTime);\n        break;\n\n    default:\n        // If not stopped, update time to the real current system time\n        if (!stopped) {\n            currentTime = new Date();\n            context.set(\"currentTime\", currentTime);\n        }\n        break;\n}\n\n// Now get the possibly updated time from context\nlet now = context.get(\"currentTime\");\n\n// Build a human-readable timestamp in the format \"DD.MM.YYYY HH:mm:ss\"\nlet year = now.getFullYear();\nlet month = String(now.getMonth() + 1).padStart(2, \"0\");\nlet day = String(now.getDate()).padStart(2, \"0\");\nlet hours = String(now.getHours()).padStart(2, \"0\");\nlet minutes = String(now.getMinutes()).padStart(2, \"0\");\nlet seconds = String(now.getSeconds()).padStart(2, \"0\");\n\nlet readableTimestamp = `${day}.${month}.${year} ${hours}:${minutes}:${seconds}`;\n\n// --- Store BOTH the epoch and the readable time in flow context ---\nflow.set(\"stoppedTimeEpoch\", now.getTime());         // e.g., 1700000000000\nflow.set(\"stoppedTimeString\", readableTimestamp);    // e.g., \"14.02.2025 16:12:30\"\n\n// Also output the readable time to the UI text widget\nmsg.payload = { time: readableTimestamp };\n\nflow.set(\"timerStopped\", stopped);   \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 100,
        "wires": [
            [
                "e38edc11d6b88c84"
            ]
        ]
    },
    {
        "id": "e38edc11d6b88c84",
        "type": "ui_text",
        "z": "dfc6be75c29e3d81",
        "g": "164d505cef501ef2",
        "group": "e2c97ead8397c075",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Time",
        "format": "{{msg.payload.time}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 990,
        "y": 160,
        "wires": []
    },
    {
        "id": "e70898258eced7f2",
        "type": "inject",
        "z": "dfc6be75c29e3d81",
        "g": "164d505cef501ef2",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "iso",
        "payloadType": "date",
        "x": 230,
        "y": 180,
        "wires": [
            [
                "e28d248a8ee362b1"
            ]
        ]
    },
    {
        "id": "a5d86884e5d1f854",
        "type": "ui_button",
        "z": "dfc6be75c29e3d81",
        "g": "164d505cef501ef2",
        "name": "",
        "group": "e2c97ead8397c075",
        "order": 2,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "Stop/start time",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "stoptime",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 220,
        "y": 140,
        "wires": [
            [
                "e28d248a8ee362b1"
            ]
        ]
    },
    {
        "id": "764bbb7ff15c98bf",
        "type": "ui_button",
        "z": "dfc6be75c29e3d81",
        "g": "164d505cef501ef2",
        "name": "",
        "group": "e2c97ead8397c075",
        "order": 3,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "-10sec",
        "tooltip": "",
        "color": "",
        "bgcolor": "grey",
        "className": "",
        "icon": "",
        "payload": "-10",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 430,
        "y": 80,
        "wires": [
            [
                "e28d248a8ee362b1"
            ]
        ]
    },
    {
        "id": "675858dcae7073d1",
        "type": "ui_form",
        "z": "dfc6be75c29e3d81",
        "g": "164d505cef501ef2",
        "name": "Comment field",
        "label": "",
        "group": "e2c97ead8397c075",
        "order": 5,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Comment",
                "value": "comment",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "comment": ""
        },
        "payload": "",
        "submit": "save comment",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 220,
        "y": 240,
        "wires": [
            [
                "b3cb8581813948ad",
                "a21c2554a92d54e0"
            ]
        ]
    },
    {
        "id": "11cb6fa41491b1b4",
        "type": "function",
        "z": "dfc6be75c29e3d81",
        "g": "bdd80abe45dfbbae",
        "name": "Calculate timestamp",
        "func": "// function 10 – build marker object with optional time offset\n//\n// IN : msg.payload  → number or numeric string\n//                     interpreted as seconds relative to “now”\n//                    (  0  = now,  -10 = 10 s ago, +5 = 5 s ahead, etc.)\n//\n// OUT: msg.payload  → { comment: \"...\", time: <epoch-ms> }\n\nlet offsetSeconds = Number(msg.payload) || 0;          // default to 0 if not a number\n\nmsg.payload = {\n    comment: \"!\",                                     // keep the fixed comment\n    time: Date.now() + offsetSeconds * 1000           // apply offset (ms)\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 500,
        "wires": [
            [
                "cc0fab8d88dfd52c",
                "45ecf11e7df1daa7"
            ]
        ]
    },
    {
        "id": "773e4b182d54ee32",
        "type": "ui_button",
        "z": "dfc6be75c29e3d81",
        "g": "bdd80abe45dfbbae",
        "name": "Set Marker",
        "group": "f54ecf5aa78bbd72",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Set Marker",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 210,
        "y": 480,
        "wires": [
            [
                "11cb6fa41491b1b4",
                "b1478ec999e555e1"
            ]
        ]
    },
    {
        "id": "b3cb8581813948ad",
        "type": "function",
        "z": "dfc6be75c29e3d81",
        "g": "164d505cef501ef2",
        "name": "Creat influxdb input",
        "func": "// \"comment\" comes from your UI form (msg.payload.comment)\nlet comment = msg.payload.comment;\n\n// Retrieve the \"stopped\" or displayed time from flow context\nlet storedEpoch = flow.get(\"stoppedTimeEpoch\") || new Date().getTime();\nlet storedString = flow.get(\"stoppedTimeString\") || \"\";\n\n// Build the Influx data point. \n// - We'll store the epoch time in the \"time\" property \n// - We'll also store a \"timeString\" for convenience, so you can see the readable time in Influx.\nmsg.payload = {\n    comment: comment,\n    time: storedEpoch\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 200,
        "wires": [
            [
                "51f3e625ca9461c8",
                "b3866f8d75598829",
                "e9976984db6fe285"
            ]
        ]
    },
    {
        "id": "a850be6cd71fb32f",
        "type": "ui_text",
        "z": "dfc6be75c29e3d81",
        "g": "bdd80abe45dfbbae",
        "group": "f54ecf5aa78bbd72",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Success notification",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 760,
        "y": 600,
        "wires": []
    },
    {
        "id": "b1478ec999e555e1",
        "type": "function",
        "z": "dfc6be75c29e3d81",
        "g": "bdd80abe45dfbbae",
        "name": "Success message",
        "func": "// 1) Immediately send \"Successfully saved marker!\"\nmsg.payload = \"Successfully saved marker!\";\nnode.send(msg);\n\n// 2) Schedule a second message to clear the text after 5 seconds\nsetTimeout(() => {\n    let clearMsg = { payload: \"\" };\n    node.send(clearMsg);\n}, 5000);\n\n// 3) End the function without sending another message right now\nreturn;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 600,
        "wires": [
            [
                "a850be6cd71fb32f"
            ]
        ]
    },
    {
        "id": "7a030ed36247437c",
        "type": "ui_text",
        "z": "dfc6be75c29e3d81",
        "g": "164d505cef501ef2",
        "group": "e2c97ead8397c075",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "status comment",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 720,
        "y": 320,
        "wires": []
    },
    {
        "id": "a21c2554a92d54e0",
        "type": "function",
        "z": "dfc6be75c29e3d81",
        "g": "164d505cef501ef2",
        "name": "success message",
        "func": "// 1) Immediately send \"Successfully saved marker!\"\nmsg.payload = \"Successfully saved comment!\";\nnode.send(msg);\n\n// 2) Schedule a second message to clear the text after 5 seconds\nsetTimeout(() => {\n    let clearMsg = { payload: \"\" };\n    node.send(clearMsg);\n}, 5000);\n\n// 3) End the function without sending another message right now\nreturn;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 320,
        "wires": [
            [
                "7a030ed36247437c"
            ]
        ]
    },
    {
        "id": "f92c41b160583d7d",
        "type": "ui_button",
        "z": "dfc6be75c29e3d81",
        "g": "bdd80abe45dfbbae",
        "name": "Set Marker -10sec",
        "group": "f54ecf5aa78bbd72",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Set Marker -10sec",
        "tooltip": "",
        "color": "",
        "bgcolor": "grey",
        "className": "",
        "icon": "",
        "payload": "-10",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 230,
        "y": 540,
        "wires": [
            [
                "b1478ec999e555e1",
                "11cb6fa41491b1b4"
            ]
        ]
    },
    {
        "id": "794685e93cf82a57",
        "type": "ui_button",
        "z": "dfc6be75c29e3d81",
        "g": "bdd80abe45dfbbae",
        "name": "Set Marker -20sec",
        "group": "f54ecf5aa78bbd72",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Set Marker -20sec",
        "tooltip": "",
        "color": "",
        "bgcolor": "grey",
        "className": "",
        "icon": "",
        "payload": "-20",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 230,
        "y": 600,
        "wires": [
            [
                "11cb6fa41491b1b4",
                "b1478ec999e555e1"
            ]
        ]
    },
    {
        "id": "bf980d0b39406e8e",
        "type": "ui_button",
        "z": "dfc6be75c29e3d81",
        "g": "bdd80abe45dfbbae",
        "name": "Set Marker -1min",
        "group": "f54ecf5aa78bbd72",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Set Marker -1min",
        "tooltip": "",
        "color": "",
        "bgcolor": "grey",
        "className": "",
        "icon": "",
        "payload": "-60",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 230,
        "y": 660,
        "wires": [
            [
                "11cb6fa41491b1b4",
                "b1478ec999e555e1"
            ]
        ]
    },
    {
        "id": "51f3e625ca9461c8",
        "type": "debug",
        "z": "dfc6be75c29e3d81",
        "g": "164d505cef501ef2",
        "name": "print influx input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 260,
        "wires": []
    },
    {
        "id": "b3866f8d75598829",
        "type": "influxdb out",
        "z": "dfc6be75c29e3d81",
        "g": "164d505cef501ef2",
        "influxdb": "120a1faa40e58151",
        "name": "Influx MarkerComments",
        "measurement": "Comments",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "myorg",
        "bucket": "MarkerComments",
        "x": 750,
        "y": 200,
        "wires": []
    },
    {
        "id": "e9976984db6fe285",
        "type": "function",
        "z": "dfc6be75c29e3d81",
        "g": "164d505cef501ef2",
        "name": "Stop/Start after comment",
        "func": "/**\n * function 1 –  startet die Uhr NUR, wenn sie pausiert ist\n */\nconst timerStopped = flow.get(\"timerStopped\") ?? false;\n\nif (timerStopped) {\n    // Uhr steht – also Start-Befehl schicken\n    node.send({ payload: \"stoptime\" });\n}\n\n// Wenn die Uhr ohnehin läuft, nichts tun.\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 160,
        "wires": [
            [
                "e28d248a8ee362b1"
            ]
        ]
    },
    {
        "id": "f8664a6736684b75",
        "type": "comment",
        "z": "dfc6be75c29e3d81",
        "g": "164d505cef501ef2",
        "name": "Comments",
        "info": "",
        "x": 200,
        "y": 80,
        "wires": []
    },
    {
        "id": "ecc79553fc29afad",
        "type": "comment",
        "z": "dfc6be75c29e3d81",
        "g": "bdd80abe45dfbbae",
        "name": "Marker",
        "info": "",
        "x": 190,
        "y": 420,
        "wires": []
    },
    {
        "id": "5393d63aa05cb5e9",
        "type": "ui_button",
        "z": "dfc6be75c29e3d81",
        "g": "b71a6dbc8e6a15a8",
        "name": "+1min",
        "group": "bb8cc161927b030e",
        "order": 2,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "+1min",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 210,
        "y": 800,
        "wires": [
            [
                "f94d80777d523641"
            ]
        ]
    },
    {
        "id": "5de2d0c9d5814fac",
        "type": "ui_button",
        "z": "dfc6be75c29e3d81",
        "g": "b71a6dbc8e6a15a8",
        "name": "-1min",
        "group": "bb8cc161927b030e",
        "order": 3,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "-1min",
        "tooltip": "",
        "color": "",
        "bgcolor": "grey",
        "className": "",
        "icon": "",
        "payload": "-1",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 210,
        "y": 840,
        "wires": [
            [
                "f94d80777d523641"
            ]
        ]
    },
    {
        "id": "6a98d3d3681ff516",
        "type": "ui_button",
        "z": "dfc6be75c29e3d81",
        "g": "b71a6dbc8e6a15a8",
        "name": "Start",
        "group": "bb8cc161927b030e",
        "order": 7,
        "width": "8",
        "height": "2",
        "passthru": false,
        "label": "Start",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "start",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 920,
        "wires": [
            [
                "f94d80777d523641"
            ]
        ]
    },
    {
        "id": "af6be6b007e506c3",
        "type": "ui_button",
        "z": "dfc6be75c29e3d81",
        "g": "b71a6dbc8e6a15a8",
        "name": "Reset",
        "group": "bb8cc161927b030e",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "grey",
        "className": "",
        "icon": "",
        "payload": "reset",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 1000,
        "wires": [
            [
                "f94d80777d523641"
            ]
        ]
    },
    {
        "id": "f94d80777d523641",
        "type": "function",
        "z": "dfc6be75c29e3d81",
        "g": "b71a6dbc8e6a15a8",
        "name": "Race Time",
        "func": "/**\n * Sailing Race Timer – v1.6\n *  • “start”  event → when 00:00:00 is reached\n *  • “end”    event → when\n *        ↳ you press Stop   while counting-up\n *        ↳ you press Reset  while counting-up (if one wasn’t sent already)\n */\n\nconst DEFAULT_MS = 60_000;\n\n// ── recover context ────────────────────────────────────────────────────\nlet ms        = context.get('ms')        ?? DEFAULT_MS;\nlet running   = context.get('running')   ?? false;\nlet direction = context.get('direction') ?? -1;     // −1 down, +1 up\nlet interval  = context.get('interval');\nlet btnEnabledPrev          = context.get('btnEnabled');\nlet startSent               = context.get('startSent') ?? false;\nlet endSent                 = context.get('endSent')   ?? false;\n\n// ── message placeholders ───────────────────────────────────────────────\nlet displayMsg = null;   // out-1\nlet buttonMsg  = null;   // out-2\nlet influxMsg  = null;   // out-3\n\nconst fmt = v=>{\n    const s  = Math.floor(v/1000);\n    const hh = String(Math.floor(s/3600)).padStart(2,'0');\n    const mm = String(Math.floor((s%3600)/60)).padStart(2,'0');\n    const ss = String(s%60).padStart(2,'0');\n    return `${hh}:${mm}:${ss}`;\n};\nfunction emitDisplay(){ displayMsg = { payload:{ time: fmt(ms) } }; }\nfunction updateButtons(){\n    const en = !running;\n    if(en !== btnEnabledPrev){\n        buttonMsg = { enabled: en };\n        btnEnabledPrev = en;\n        context.set('btnEnabled', en);\n    }\n}\n\nfunction startTicking(){\n    interval = setInterval(()=>{\n        influxMsg = null;               // default: nothing to influx this tick\n        ms += 1000 * direction;\n\n        // countdown reached zero → flip to up & send “start” once\n        if(direction === -1 && ms <= 0){\n            ms = 0;  direction = 1;\n            if(!startSent){\n                influxMsg = { event: \"start\" };\n                startSent = true;  endSent = false;    // arm an “end”\n                context.set('startSent', true);\n                context.set('endSent',   false);\n            }\n        }\n        context.set('ms', ms);\n        context.set('direction', direction);\n        emitDisplay();\n        node.send([displayMsg, null, influxMsg]);   // live UI; buttons unchanged\n    }, 1000);\n\n    running = true;\n    context.set('running',  true);\n    context.set('interval', interval);\n    updateButtons();\n}\n\n// ── button commands ────────────────────────────────────────────────────\nswitch(String(msg.payload).trim()){\n\ncase \"1\":  if(!running) ms += 60_000;                break;\ncase \"-1\": if(!running) ms = Math.max(0, ms - 60_000); break;\n\ncase \"start\":\n    if(!running) startTicking();\n    break;\n\ncase \"stop\":\n    if(running){\n        clearInterval(interval);\n        running = false; interval = null;\n        context.set('running', false);\n        context.set('interval', null);\n        updateButtons();\n\n        if(direction === 1 && !endSent){             // counting-up → “end”\n            influxMsg = { event: \"end\" };\n            endSent   = true;\n            context.set('endSent', true);\n        }\n    }\n    break;\n\ncase \"reset\": {\n    // if we had begun counting-up but never logged “end”, log it now\n    if(direction === 1 && !endSent){\n        influxMsg = { event: \"end\" };\n    }\n\n    if(running){\n        clearInterval(interval);\n        running = false; interval = null;\n        context.set('running', false);\n        context.set('interval', null);\n    }\n    ms = DEFAULT_MS;  direction = -1;\n    startSent = false; endSent = false;\n    context.set('direction',  -1);\n    context.set('startSent', false);\n    context.set('endSent',   false);\n    updateButtons();\n    break;\n}\n\ncase \"sync\":\n    if(direction === -1){\n        ms = (ms > 60_000) ? Math.floor(ms/60_000)*60_000 : 60_000;\n        if(running){\n            clearInterval(interval);\n            running = false; interval = null;\n            startTicking();\n        }\n    }\n    break;\n}\n\n// ── persist & output ───────────────────────────────────────────────────\ncontext.set('ms', ms);\nemitDisplay(); updateButtons();\nreturn [displayMsg, buttonMsg, influxMsg];\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 880,
        "wires": [
            [
                "e397b52aadc3056f"
            ],
            [
                "5de2d0c9d5814fac",
                "5393d63aa05cb5e9"
            ],
            [
                "87fb462030fb371b"
            ]
        ]
    },
    {
        "id": "e397b52aadc3056f",
        "type": "ui_text",
        "z": "dfc6be75c29e3d81",
        "g": "b71a6dbc8e6a15a8",
        "group": "bb8cc161927b030e",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "RaceTimer time",
        "label": "",
        "format": "{{msg.payload.time}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#ffffff",
        "x": 760,
        "y": 820,
        "wires": []
    },
    {
        "id": "4c58b677f7cff602",
        "type": "ui_button",
        "z": "dfc6be75c29e3d81",
        "g": "b71a6dbc8e6a15a8",
        "name": "Sync",
        "group": "bb8cc161927b030e",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Sync",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "sync",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 880,
        "wires": [
            [
                "f94d80777d523641"
            ]
        ]
    },
    {
        "id": "86b3d4cec2af2094",
        "type": "ui_button",
        "z": "dfc6be75c29e3d81",
        "g": "b71a6dbc8e6a15a8",
        "name": "Stop/ End race",
        "group": "bb8cc161927b030e",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Stop/ End race",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "stop",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 220,
        "y": 960,
        "wires": [
            [
                "f94d80777d523641"
            ]
        ]
    },
    {
        "id": "1bb54de7da16fefa",
        "type": "comment",
        "z": "dfc6be75c29e3d81",
        "g": "b71a6dbc8e6a15a8",
        "name": "Racetimer",
        "info": "",
        "x": 200,
        "y": 760,
        "wires": []
    },
    {
        "id": "befe1993f6594d89",
        "type": "influxdb out",
        "z": "dfc6be75c29e3d81",
        "g": "b71a6dbc8e6a15a8",
        "influxdb": "120a1faa40e58151",
        "name": "Influx MarkerComments",
        "measurement": "Events",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "myorg",
        "bucket": "MarkerComments",
        "x": 850,
        "y": 880,
        "wires": []
    },
    {
        "id": "87fb462030fb371b",
        "type": "function",
        "z": "dfc6be75c29e3d81",
        "g": "b71a6dbc8e6a15a8",
        "name": "Create influxdb input",
        "func": "/* Convert Race-Time events to Influx payload */\n\nif (msg && typeof msg.event === \"string\") {\n    msg.payload = {\n        comment : msg.event === \"start\" ? \"start\" : \"end\",\n        time    : Date.now()\n    };\n    return msg;\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 940,
        "wires": [
            [
                "befe1993f6594d89",
                "908c55d2ee539d80"
            ]
        ]
    },
    {
        "id": "908c55d2ee539d80",
        "type": "debug",
        "z": "dfc6be75c29e3d81",
        "g": "b71a6dbc8e6a15a8",
        "name": "print influxdb input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 940,
        "wires": []
    },
    {
        "id": "62afc8e9b0284991",
        "type": "mqtt in",
        "z": "cac41ceca32ba8f4",
        "g": "fab8f998ea327db9",
        "name": "hublive",
        "topic": "hublive",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4288dd7f10ed06f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 240,
        "wires": [
            [
                "f252145cfbad1321",
                "ddfbf199c58e4f65",
                "65066aa50935f39f"
            ]
        ]
    },
    {
        "id": "ddfbf199c58e4f65",
        "type": "function",
        "z": "cac41ceca32ba8f4",
        "g": "fab8f998ea327db9",
        "name": "Split if Array",
        "func": "// Check if the payload is an array\nif (Array.isArray(msg.payload)) {\n    // If it's an array, process each element\n    let messages = msg.payload.map(data => {\n        // If data is a JSON string, parse it\n        if (typeof data === \"string\") {\n            try {\n                data = JSON.parse(data);\n            } catch (error) {\n                node.warn(\"Invalid JSON format: \" + data);\n                return null; // Skip invalid entries\n            }\n        }\n        return { payload: data };\n    });\n\n    // Remove any null (invalid) messages\n    messages = messages.filter(msg => msg !== null);\n\n    return [messages];  // Return an array of messages\n\n} else {\n    // If the payload is not an array (it's a single object), process it\n    if (typeof msg.payload === \"string\") {\n        try {\n            msg.payload = JSON.parse(msg.payload); // Try parsing if it's a string\n        } catch (error) {\n            node.warn(\"Invalid JSON format: \" + msg.payload);\n            return null; // Skip if invalid JSON\n        }\n    }\n\n    // Return the single message as an array (so it can be processed like an array)\n    return [{ payload: msg.payload }];\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 280,
        "wires": [
            [
                "557e34db65adff2d",
                "3efad084a44a2143",
                "5a95e6d353ba1a13",
                "c5a7a57af05ac1a5",
                "330f2c8944cb2bc8"
            ]
        ]
    },
    {
        "id": "f252145cfbad1321",
        "type": "debug",
        "z": "cac41ceca32ba8f4",
        "g": "fab8f998ea327db9",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 200,
        "wires": []
    },
    {
        "id": "557e34db65adff2d",
        "type": "function",
        "z": "cac41ceca32ba8f4",
        "g": "fab8f998ea327db9",
        "name": "ParseFunction",
        "func": "// Process sensor data directly without checking for a switch\n\nlet data = msg.payload;\n\n// Only proceed if data.validtime === true\nif (data.validtime !== true) {\n    // Stop processing and do not send a message forward\n    return null;\n}\n\n// Build the message including additional wind and magnetic fields\nlet message = {\n    // Basic sensor data\n    HDOP: parseFloat(data.HDOP) || null,\n    alt: parseFloat(data.alt) || null,\n    nSat: parseInt(data.nSat, 10) || null,\n    SOG: parseFloat(data.SOG) || null,\n    lat: parseFloat(data.lat) || null,\n    long: parseFloat(data.long) || null,\n    fixQ: parseInt(data.fixQ, 10) || null,\n    validtime: data.validtime ? 1 : 0,\n    COG: data.COG || \"\",\n    status: data.status || \"\",\n    time: new Date(data.datetime).getTime() || null,\n\n    // Wind data\n    w_angle: parseFloat(data.w_angle) || null,\n    w_speed: parseFloat(data.w_speed) || null,\n    w_unit: data.w_unit || \"\",\n    w_status: data.w_status || \"\",\n    w_checksum: data.w_checksum || \"\",\n    w_speed_kts: parseFloat(data.w_speed_kts) || null,\n\n    // Magnetic field data\n    mag_x: parseFloat(data.mag_x) || null,\n    mag_y: parseFloat(data.mag_y) || null,\n    mag_z: parseFloat(data.mag_z) || null,\n\n    // Additional heading data\n    heading: parseFloat(data.heading) || null,\n    true_wind_dir: parseFloat(data.true_wind_dir) || null\n};\n\nmsg.payload = message;\nmsg.measurement = data.id;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 280,
        "wires": [
            [
                "91d87ce984bee544"
            ]
        ]
    },
    {
        "id": "91d87ce984bee544",
        "type": "debug",
        "z": "cac41ceca32ba8f4",
        "g": "fab8f998ea327db9",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 260,
        "wires": []
    },
    {
        "id": "fab8bd20a3af2d2c",
        "type": "ui_gauge",
        "z": "cac41ceca32ba8f4",
        "g": "fab8f998ea327db9",
        "name": "",
        "group": "baf37660cc1566a0",
        "order": 1,
        "width": "4",
        "height": "3",
        "gtype": "gage",
        "title": "Windspeed",
        "label": "knots",
        "format": "{{value}}",
        "min": 0,
        "max": "45",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "20",
        "seg2": "30",
        "diff": false,
        "className": "",
        "x": 890,
        "y": 380,
        "wires": []
    },
    {
        "id": "3efad084a44a2143",
        "type": "function",
        "z": "cac41ceca32ba8f4",
        "g": "fab8f998ea327db9",
        "name": "ParseFunction",
        "func": "let data = msg.payload;\n\n// Parse the wind speed in knots\nlet windSpeed = parseFloat(data.w_speed_kts);\n\n// If the parsed wind speed is not a valid number, output null\nif (isNaN(windSpeed)) {\n    msg.payload = null;\n} else {\n    // Round the wind speed to two decimal places\n    msg.payload = Math.round(windSpeed * 100) / 100;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 380,
        "wires": [
            [
                "fab8bd20a3af2d2c",
                "c30e207efd8ebd48"
            ]
        ]
    },
    {
        "id": "c30e207efd8ebd48",
        "type": "ui_chart",
        "z": "cac41ceca32ba8f4",
        "g": "fab8f998ea327db9",
        "name": "",
        "group": "baf37660cc1566a0",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Windspeed",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "25",
        "removeOlder": "15",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#f5ec00",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 930,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "65066aa50935f39f",
        "type": "function",
        "z": "cac41ceca32ba8f4",
        "g": "fab8f998ea327db9",
        "name": "ParseFunction",
        "func": "let data = msg.payload;\n\n// Parse the SOG value as a float\nlet sog = parseFloat(data.SOG);\n\n// Check if the parsed value is a valid number; if so, round to two decimal places\nif (isNaN(sog)) {\n    msg.payload = null;\n} else {\n    msg.payload = Math.round(sog * 100) / 100;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 120,
        "wires": [
            [
                "a2395d9057c46ef9"
            ]
        ]
    },
    {
        "id": "a2395d9057c46ef9",
        "type": "ui_gauge",
        "z": "cac41ceca32ba8f4",
        "g": "fab8f998ea327db9",
        "name": "",
        "group": "baf37660cc1566a0",
        "order": 2,
        "width": "4",
        "height": "3",
        "gtype": "gage",
        "title": "Coach Boatspeed",
        "label": "knots",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "1",
        "seg2": "3",
        "diff": false,
        "className": "",
        "x": 890,
        "y": 140,
        "wires": []
    },
    {
        "id": "e69b11a1a6e6629c",
        "type": "ui_chart",
        "z": "cac41ceca32ba8f4",
        "g": "fab8f998ea327db9",
        "name": "",
        "group": "9fcd7d230c83dda0",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Apperent Windangle",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "360",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#00f900",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 940,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "5a95e6d353ba1a13",
        "type": "function",
        "z": "cac41ceca32ba8f4",
        "g": "fab8f998ea327db9",
        "name": "ParseFunction",
        "func": "let data = msg.payload;\n\n// Parse the wind speed in knots\nlet w_angle = parseFloat(data.w_angle);\n\n// If the parsed wind speed is not a valid number, output null\nif (isNaN(w_angle)) {\n    msg.payload = null;\n} else {\n    // Round the wind speed to two decimal places\n    msg.payload = Math.round(w_angle * 100) / 100;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 500,
        "wires": [
            [
                "e69b11a1a6e6629c",
                "f799179af90d5601"
            ]
        ]
    },
    {
        "id": "c5a7a57af05ac1a5",
        "type": "function",
        "z": "cac41ceca32ba8f4",
        "g": "fab8f998ea327db9",
        "name": "ParseFunction",
        "func": "let data = msg.payload;\n\n// Parse the wind speed in knots\nlet true_wind_dir = parseFloat(data.true_wind_dir);\n\n// If the parsed wind speed is not a valid number, output null\nif (isNaN(true_wind_dir)) {\n    msg.payload = null;\n} else {\n    // Round the wind speed to two decimal places\n    msg.payload = Math.round(true_wind_dir * 100) / 100;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 600,
        "wires": [
            [
                "d716fe94a1255f6b",
                "a59c2672c332ac1d"
            ]
        ]
    },
    {
        "id": "d716fe94a1255f6b",
        "type": "ui_chart",
        "z": "cac41ceca32ba8f4",
        "g": "fab8f998ea327db9",
        "name": "",
        "group": "9fcd7d230c83dda0",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "True Windangle",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "360",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff9300",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 920,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "330f2c8944cb2bc8",
        "type": "function",
        "z": "cac41ceca32ba8f4",
        "g": "fab8f998ea327db9",
        "name": "ParseFunction",
        "func": "let data = msg.payload;\n\n// Parse the wind speed in knots\nlet heading = parseFloat(data.heading);\n\n// If the parsed wind speed is not a valid number, output null\nif (isNaN(heading)) {\n    msg.payload = null;\n} else {\n    // Round the wind speed to two decimal places\n    msg.payload = Math.round(heading * 100) / 100;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 680,
        "wires": [
            [
                "3b713c50c07ac4be"
            ]
        ]
    },
    {
        "id": "f799179af90d5601",
        "type": "ui_text",
        "z": "cac41ceca32ba8f4",
        "g": "fab8f998ea327db9",
        "group": "9fcd7d230c83dda0",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Apperent Windangle",
        "format": "{{msg.payload}}°",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 940,
        "y": 540,
        "wires": []
    },
    {
        "id": "a59c2672c332ac1d",
        "type": "ui_text",
        "z": "cac41ceca32ba8f4",
        "g": "fab8f998ea327db9",
        "group": "9fcd7d230c83dda0",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "True Windangle",
        "format": "{{msg.payload}}°",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 920,
        "y": 640,
        "wires": []
    },
    {
        "id": "3b713c50c07ac4be",
        "type": "ui_text",
        "z": "cac41ceca32ba8f4",
        "g": "fab8f998ea327db9",
        "group": "9fcd7d230c83dda0",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Heading",
        "format": "{{msg.payload}}°",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 900,
        "y": 700,
        "wires": []
    },
    {
        "id": "a799cd675869e3a0",
        "type": "comment",
        "z": "cac41ceca32ba8f4",
        "g": "fab8f998ea327db9",
        "name": "Wind",
        "info": "",
        "x": 190,
        "y": 120,
        "wires": []
    },
    {
        "id": "259e474bcf82a661",
        "type": "mqtt in",
        "z": "d8699a550f41ef88",
        "g": "f645809cbc9a0662",
        "name": "",
        "topic": "phonelive",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4288dd7f10ed06f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 200,
        "wires": [
            [
                "571190578a3c4111"
            ]
        ]
    },
    {
        "id": "571190578a3c4111",
        "type": "debug",
        "z": "d8699a550f41ef88",
        "g": "f645809cbc9a0662",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 200,
        "wires": []
    },
    {
        "id": "6c101a4417d8117e",
        "type": "ui_text_input",
        "z": "d8699a550f41ef88",
        "g": "f645809cbc9a0662",
        "name": "StudyID",
        "label": "StudyID",
        "tooltip": "",
        "group": "4b985976f90f6dd3",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 0,
        "topic": "",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 220,
        "y": 340,
        "wires": [
            [
                "a1b2c3d4e5f60708"
            ]
        ]
    },
    {
        "id": "fa683d52b7845976",
        "type": "ui_text_input",
        "z": "d8699a550f41ef88",
        "g": "f645809cbc9a0662",
        "name": "Secret",
        "label": "Secret",
        "tooltip": "",
        "group": "4b985976f90f6dd3",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 0,
        "topic": "",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 210,
        "y": 380,
        "wires": [
            [
                "b1c2d3e4f5a60708"
            ]
        ]
    },
    {
        "id": "a1b2c3d4e5f60708",
        "type": "change",
        "z": "d8699a550f41ef88",
        "g": "f645809cbc9a0662",
        "name": "Store StudyID",
        "rules": [
            {
                "t": "set",
                "p": "studyId",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "x": 420,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "b1c2d3e4f5a60708",
        "type": "change",
        "z": "d8699a550f41ef88",
        "g": "f645809cbc9a0662",
        "name": "Store Secret",
        "rules": [
            {
                "t": "set",
                "p": "secret",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "x": 410,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "57ef1d2a7e25d441",
        "type": "ui_button",
        "z": "d8699a550f41ef88",
        "g": "f645809cbc9a0662",
        "name": "Fetch Data",
        "group": "4b985976f90f6dd3",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Fetch Data",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 230,
        "y": 420,
        "wires": [
            [
                "f76faf3de5aa2a52",
                "174d07cbb65791d5"
            ]
        ]
    },
    {
        "id": "f76faf3de5aa2a52",
        "type": "function",
        "z": "d8699a550f41ef88",
        "g": "f645809cbc9a0662",
        "name": "Build HTTP Request",
        "func": "// Pull stored values\nconst studyId = flow.get('studyId');\nconst secret  = flow.get('secret');\n\nif (!studyId || !secret) {\n    node.error('Both StudyID and Secret must be set');\n    return null;\n}\n// Build the GET\nmsg.method = 'GET';\nmsg.url = `https://sensorlogger.app/api/study/v1?studyId=${studyId}`;\nmsg.headers = { 'Authorization': secret };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 420,
        "wires": [
            [
                "c20dc8faa67f0e7b"
            ]
        ]
    },
    {
        "id": "c20dc8faa67f0e7b",
        "type": "http request",
        "z": "d8699a550f41ef88",
        "g": "f645809cbc9a0662",
        "name": "Get Study Data",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 680,
        "y": 420,
        "wires": [
            [
                "f5d056130870205e",
                "2faabede9e7d4765"
            ]
        ]
    },
    {
        "id": "f5d056130870205e",
        "type": "debug",
        "z": "d8699a550f41ef88",
        "g": "f645809cbc9a0662",
        "name": "Response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1000,
        "y": 380,
        "wires": []
    },
    {
        "id": "2faabede9e7d4765",
        "type": "function",
        "z": "d8699a550f41ef88",
        "g": "f645809cbc9a0662",
        "name": "Parse File List",
        "func": "// NEW (robust – works whether the extra wrapper is present or not)\nconst recs =\n    msg.payload?.recordings                   // normal case\n    || msg.payload?.payload?.recordings          // fall-back if another node wrapped it\n    || [];                                       // empty array if still nothing\n\nif (!Array.isArray(recs) || recs.length === 0) {\n    node.error('No recordings found in API response');\n    return null;\n}\n\n// keep full objects in context for later use\nflow.set('recordings', recs);\n\n// build minimal rows for the UI table\nconst pad = n => n.toString().padStart(2, '0');\nconst ts = d => `${pad(d.getDate())}.${pad(d.getMonth() + 1)}.${d.getFullYear()}, `\n    + `${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;\nconst now = ts(new Date());\n\nmsg.payload = recs.map(r => ({\n    filename: r.name.split('-')[0],\n    received: now\n}));\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 440,
        "wires": [
            [
                "174d07cbb65791d5"
            ]
        ]
    },
    {
        "id": "174d07cbb65791d5",
        "type": "ui_table",
        "z": "d8699a550f41ef88",
        "g": "f645809cbc9a0662",
        "group": "4b985976f90f6dd3",
        "name": "",
        "order": 5,
        "width": "8",
        "height": "8",
        "columns": [
            {
                "field": "filename",
                "title": "Filename",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "received",
                "title": "Received",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 410,
        "y": 500,
        "wires": []
    },
    {
        "id": "113a2468753170ab",
        "type": "inject",
        "z": "d8699a550f41ef88",
        "g": "f645809cbc9a0662",
        "name": "Repeat every 5s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 260,
        "wires": [
            [
                "266f07ef9c7ab3ab"
            ]
        ]
    },
    {
        "id": "266f07ef9c7ab3ab",
        "type": "conf ping",
        "z": "d8699a550f41ef88",
        "g": "f645809cbc9a0662",
        "name": "Ping Check",
        "host": "google.com",
        "timeout": "5",
        "requests": "1",
        "x": 480,
        "y": 260,
        "wires": [
            [
                "cb1aba92c6e3cc16"
            ]
        ]
    },
    {
        "id": "cb1aba92c6e3cc16",
        "type": "function",
        "z": "d8699a550f41ef88",
        "g": "f645809cbc9a0662",
        "name": "Check Ping Result",
        "func": "// Check ping result\nif (msg.payload === false || msg.payload === null) {\n    msg.payload = \"🔴 offline!\";\n} else {\n    msg.payload = \"🟢  (\" + msg.payload + \" ms)\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 260,
        "wires": [
            [
                "f0059a2e316903f9"
            ]
        ]
    },
    {
        "id": "f0059a2e316903f9",
        "type": "ui_text",
        "z": "d8699a550f41ef88",
        "g": "f645809cbc9a0662",
        "group": "4b985976f90f6dd3",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Ping Status",
        "label": "Online",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 930,
        "y": 260,
        "wires": []
    },
    {
        "id": "c8c906c5028e2096",
        "type": "function",
        "z": "d8699a550f41ef88",
        "g": "ef3ac95acf4574f7",
        "name": "SplitMessages",
        "func": "// ░░ c8c906c5028e2096 - SplitMessages ░░\n/*\n * The button injects \"reset\".  At that moment we\n *  • send ONE job for the MarkerComments bucket\n *  • send ONE job per recording for /exportsmartphone\n *    carrying studyId, secret, filename, uploadId\n */\n\nif (msg.payload !== \"reset\") {   // ignore everything else\n    return null;\n}\n\n// ---- one smartphone-export job per recording ----\nconst recs = flow.get('recordings') || [];\nconst studyId = flow.get('studyId');\nconst secret = flow.get('secret');\n\nrecs.forEach(r => {\n    node.send({      // goes through the “2-second delay” path\n        payload: {\n            studyid: studyId,\n            secret: secret,\n            filename: r.name,\n            uploadid: r.uploadId\n        }\n    });\n});\n\n// we have emitted everything manually → halt the original msg\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 680,
        "wires": [
            [
                "54833ecaa8d7e231",
                "01d445e715210c97"
            ]
        ]
    },
    {
        "id": "e7959d1af6e12fa3",
        "type": "ui_button",
        "z": "d8699a550f41ef88",
        "g": "ef3ac95acf4574f7",
        "name": "",
        "group": "4a3715950dbbb6c9",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Create Smartphone Analysis files",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "reset",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 300,
        "y": 640,
        "wires": [
            [
                "1888768656edc614",
                "c8c906c5028e2096"
            ]
        ]
    },
    {
        "id": "54833ecaa8d7e231",
        "type": "delay",
        "z": "d8699a550f41ef88",
        "g": "ef3ac95acf4574f7",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 840,
        "y": 660,
        "wires": [
            [
                "1888768656edc614"
            ]
        ]
    },
    {
        "id": "01d445e715210c97",
        "type": "delay",
        "z": "d8699a550f41ef88",
        "g": "ef3ac95acf4574f7",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 880,
        "y": 700,
        "wires": [
            [
                "f5dac30a220b3ea6"
            ]
        ]
    },
    {
        "id": "1888768656edc614",
        "type": "function",
        "z": "d8699a550f41ef88",
        "g": "ef3ac95acf4574f7",
        "name": "Update table",
        "func": "// ------------  Update table (boats + buckets)  ------------\nconst colour = { success: \"#00FF00\", error: \"#FF0000\", processing: \"#FFFF00\" };\nconst now = () => new Date().toLocaleString(\"de-DE\", {\n    day: \"2-digit\", month: \"2-digit\", year: \"numeric\",\n    hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\"\n});\n\n// 0) reset?\nif (msg.payload === \"reset\") {\n    flow.set(\"exportTableBoat\", []);\n    msg.payload = [];\n    return msg;\n}\n\n// 1) normalise input  → id + status\nlet id, status = \"processing\";\n\nif (typeof msg.payload === \"string\") {          // comes directly from button\n    id = msg.payload;                           // \"MarkerComments\"\n}\nelse if (msg.payload.bucket) {                  // initial work-msg\n    id = msg.payload.bucket;                    // \"MarkerComments\"\n}\nelse if (msg.payload.file) {                    // smartphone API response\n    // translate status \"ok\" → \"success\" for the colour map\n    status = (msg.payload.status || \"processing\").toLowerCase();\n    if (status === \"ok\") status = \"success\";\n\n    // extract “boat4”, “boat5”, … from the full path\n    const filename = msg.payload.file.split(\"/\").pop();   // boat5-2025-05-27_…\n    id = filename.split(\"-\")[0];                          // → \"boat5\"\n}\n\nif (!id) return null;                           // nothing recognised\n\n// 2) merge / insert row\nconst table = flow.get(\"exportTableBoat\") || [];\nconst row = {\n    id,\n    lastSync: status === \"processing\" ? \"in progress\" : now(),\n    status: colour[status] || \"#CCCCCC\"\n};\n\nconst idx = table.findIndex(r => r.id === id);\n(idx === -1) ? table.push(row) : (table[idx] = row);\n\n// 3) save & emit fresh copy\nflow.set(\"exportTableBoat\", table);\nmsg.payload = table.map(r => ({ ...r }));\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 620,
        "wires": [
            [
                "450a35c62b4af494"
            ]
        ]
    },
    {
        "id": "f5dac30a220b3ea6",
        "type": "http request",
        "z": "d8699a550f41ef88",
        "g": "ef3ac95acf4574f7",
        "name": "Trigger Export via API",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://172.17.0.1:5000/exportsmartphone",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1120,
        "y": 680,
        "wires": [
            [
                "1c77cb1435ac6244",
                "1888768656edc614"
            ]
        ]
    },
    {
        "id": "450a35c62b4af494",
        "type": "ui_table",
        "z": "d8699a550f41ef88",
        "g": "ef3ac95acf4574f7",
        "group": "4a3715950dbbb6c9",
        "name": "Export Status Table Other",
        "order": 1,
        "width": "8",
        "height": "6",
        "columns": [
            {
                "field": "id",
                "title": "Device",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "lastSync",
                "title": "Last sync",
                "width": "50%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "status",
                "title": "Status",
                "width": "20%",
                "align": "left",
                "formatter": "color",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1390,
        "y": 620,
        "wires": []
    },
    {
        "id": "1c77cb1435ac6244",
        "type": "debug",
        "z": "d8699a550f41ef88",
        "g": "ef3ac95acf4574f7",
        "name": "result API",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 700,
        "wires": []
    },
    {
        "id": "60dd77cbea8a74d2",
        "type": "ui_button",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "Reboot system",
        "group": "f58a2c60a623b0ab",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reboot system",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "keyboard_arrow_down",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 600,
        "wires": [
            [
                "ddc635fe60b47a1e"
            ]
        ]
    },
    {
        "id": "1407cbb82301a3f9",
        "type": "ui_button",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "hubservices report",
        "group": "f58a2c60a623b0ab",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "hubservices report",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "3b2ab115f47b6556"
            ]
        ]
    },
    {
        "id": "3b2ab115f47b6556",
        "type": "function",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "cmd hubservice report",
        "func": "// output[0] → goes through delay → HTTP request\nvar cmdMsg = {\n    payload: {\n        cmd: \"/usr/bin/sudo /usr/bin/journalctl -u hubservices.service -n 50\"\n    }\n};\n\n// output[1] → straight to the ui_text status widget\nvar statusMsg = { payload: \"hubservice report in progress\" };\n\nreturn [cmdMsg, statusMsg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 160,
        "wires": [
            [
                "dab8596eedc432ce"
            ],
            [
                "c84c3e9f4a5a3b11"
            ]
        ]
    },
    {
        "id": "c68e5cb3f4a61ec3",
        "type": "debug",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 240,
        "wires": []
    },
    {
        "id": "281ca9390dc83d59",
        "type": "ui_button",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "hubservices restart",
        "group": "f58a2c60a623b0ab",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "hubservices restart",
        "tooltip": "",
        "color": "",
        "bgcolor": "grey",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 220,
        "wires": [
            [
                "07aad5c55e420710"
            ]
        ]
    },
    {
        "id": "07aad5c55e420710",
        "type": "function",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "cmd hubservice restart",
        "func": "// output[0] → goes through delay → HTTP request\nvar cmdMsg = {\n    payload: {\n        cmd: \"/usr/bin/sudo /usr/bin/systemctl restart hubservices.service\"\n    }\n};\n\n// output[1] → straight to the ui_text status widget\nvar statusMsg = { payload: \"restart hubservice in 3sec\" };\n\nreturn [cmdMsg, statusMsg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 220,
        "wires": [
            [
                "24fa1666207a615e"
            ],
            [
                "c84c3e9f4a5a3b11"
            ]
        ]
    },
    {
        "id": "6f3ec9d1b7575834",
        "type": "ui_text",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "group": "f58a2c60a623b0ab",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Sucess Message",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1130,
        "y": 100,
        "wires": []
    },
    {
        "id": "ddc635fe60b47a1e",
        "type": "function",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "cmd reboot system",
        "func": "var cmdMsg = {\n    payload: { cmd: \"/usr/bin/sudo /usr/sbin/reboot\" }   // or /sbin/reboot\n};\nvar statusMsg = { payload: \"system will reboot in 5 sec\" };\nreturn [cmdMsg, statusMsg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 600,
        "wires": [
            [
                "24fa1666207a615e"
            ],
            [
                "c84c3e9f4a5a3b11"
            ]
        ]
    },
    {
        "id": "aee0109d299a81ce",
        "type": "http request",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://172.17.0.1:5000/exec",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 240,
        "wires": [
            [
                "c68e5cb3f4a61ec3",
                "6f3ec9d1b7575834"
            ]
        ]
    },
    {
        "id": "24fa1666207a615e",
        "type": "delay",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 780,
        "y": 240,
        "wires": [
            [
                "aee0109d299a81ce"
            ]
        ]
    },
    {
        "id": "979796b66a563b35",
        "type": "ui_button",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "noderedservices report",
        "group": "f58a2c60a623b0ab",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "noderedservices report",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "a6b08bac86681708"
            ]
        ]
    },
    {
        "id": "a6b08bac86681708",
        "type": "function",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "cmd noderedservices report",
        "func": "// output[0] → goes through delay → HTTP request\nvar cmdMsg = {\n    payload: {\n        cmd: \"/usr/bin/sudo /usr/bin/journalctl -u noderedservices.service -n 50\"\n    }\n};\n\n// output[1] → straight to the ui_text status widget\nvar statusMsg = { payload: \"noderedservices report in progress\" };\n\nreturn [cmdMsg, statusMsg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 300,
        "wires": [
            [
                "dab8596eedc432ce"
            ],
            [
                "c84c3e9f4a5a3b11"
            ]
        ]
    },
    {
        "id": "4b68afc291b39460",
        "type": "ui_button",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "noderedservices restart",
        "group": "f58a2c60a623b0ab",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "noderedservices restart",
        "tooltip": "",
        "color": "",
        "bgcolor": "grey",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 360,
        "wires": [
            [
                "d32e4202f4795119"
            ]
        ]
    },
    {
        "id": "d32e4202f4795119",
        "type": "function",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "cmd noderedservices restart",
        "func": "// output[0] → goes through delay → HTTP request\nvar cmdMsg = {\n    payload: {\n        cmd: \"/usr/bin/sudo /usr/bin/systemctl restart noderedservices.service\"\n    }\n};\n\n// output[1] → straight to the ui_text status widget\nvar statusMsg = { payload: \"restart noderedservices in 3sec\" };\n\nreturn [cmdMsg, statusMsg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 360,
        "wires": [
            [
                "24fa1666207a615e"
            ],
            [
                "c84c3e9f4a5a3b11"
            ]
        ]
    },
    {
        "id": "c84c3e9f4a5a3b11",
        "type": "trigger",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "status → clear after 4 s",
        "op1": "",
        "op2": " ",
        "op1type": "pay",
        "op2type": "str",
        "duration": "4",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 830,
        "y": 100,
        "wires": [
            [
                "6f3ec9d1b7575834"
            ]
        ]
    },
    {
        "id": "dab8596eedc432ce",
        "type": "delay",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 740,
        "y": 300,
        "wires": [
            [
                "f7aa225017ae99e9"
            ]
        ]
    },
    {
        "id": "f7aa225017ae99e9",
        "type": "http request",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://172.17.0.1:5000/exec",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 890,
        "y": 300,
        "wires": [
            [
                "f2de5d1d93afbeaa",
                "c68e5cb3f4a61ec3"
            ]
        ]
    },
    {
        "id": "f2de5d1d93afbeaa",
        "type": "trigger",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "clear logtab after 100 ms",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "null",
        "duration": "100",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1170,
        "y": 300,
        "wires": [
            [
                "1c6630876dc198ff"
            ]
        ]
    },
    {
        "id": "1c6630876dc198ff",
        "type": "ui_template",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "group": "f58a2c60a623b0ab",
        "name": "open log in new tab",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<script>\n(function(scope){\n    scope.$watch('msg', function(msg){\n        if(msg && typeof msg.payload === 'object' && (msg.payload.output || msg.payload.error)){\n            var esc = function(s){return s.replace(/[&<>]/g,function(c){return {'&':'&amp;','<':'&lt;','>':'&gt;'}[c];});};\n            var out = esc(msg.payload.output || \"\");\n            var err = esc(msg.payload.error  || \"\");\n            var html = '<pre style=\"white-space:pre-wrap;font-family:monospace;\">'+out+(err?'\\n\\n--- stderr ---\\n'+err:'')+'</pre>';\n            var win = window.open('', '_blank');\n            if(win){win.document.open();win.document.write(html);win.document.close();}\n        }\n    });\n})(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1250,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "f9347d45b7d91383",
        "type": "comment",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "Error handling",
        "info": "",
        "x": 110,
        "y": 100,
        "wires": []
    },
    {
        "id": "363a3be7dc485b30",
        "type": "ui_button",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "wifi report",
        "group": "f58a2c60a623b0ab",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "wifi report",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 480,
        "wires": [
            [
                "f59df9cebe4e4d60"
            ]
        ]
    },
    {
        "id": "f59df9cebe4e4d60",
        "type": "function",
        "z": "ddf0ae6b0f14b564",
        "g": "d175e45e6facd7fa",
        "name": "cmd wifi report",
        "func": "// output[0] → goes through delay → HTTP request\nvar cmdMsg = {\n    payload: {\n        cmd: \"/usr/bin/sudo /usr/bin/journalctl -u NetworkManager -u wpa_supplicant -n 50\"\n    }\n};\n\n// output[1] → straight to the ui_text status widget\nvar statusMsg = { payload: \"wifi report in progress\" };\n\nreturn [cmdMsg, statusMsg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 480,
        "wires": [
            [
                "dab8596eedc432ce"
            ],
            [
                "c84c3e9f4a5a3b11"
            ]
        ]
    }
]