[
    {
        "id": "8aa1eea5c21e7d1c",
        "type": "tab",
        "label": "Control",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6d74585e23cec175",
        "type": "tab",
        "label": "LiveData",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7805de2be92eb497",
        "type": "tab",
        "label": "LogTransfer",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "42fedc37cdaa024d",
        "type": "tab",
        "label": "AnalysisPrepartation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dfc6be75c29e3d81",
        "type": "tab",
        "label": "Story",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cac41ceca32ba8f4",
        "type": "tab",
        "label": "Dashboards",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d8699a550f41ef88",
        "type": "tab",
        "label": "Phone Integratioin",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "beb3a915ca0cda00",
        "type": "group",
        "z": "8aa1eea5c21e7d1c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c06b2a91579d9c3d",
            "3e738ad5327fe520",
            "eef23693638c20e9",
            "1da843bb1c5cf1fd"
        ],
        "x": 1244,
        "y": 79,
        "w": 442,
        "h": 202
    },
    {
        "id": "0e151f65fcc2bf1c",
        "type": "group",
        "z": "8aa1eea5c21e7d1c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e4b8f6a0248ef87d",
            "397c1506decea8fd",
            "b052878629053aa3",
            "1b9bc9dde11f2073",
            "21e88280f76cd19a",
            "84981f489f4c65e5",
            "859d63a123d49e0b",
            "e405c7cb1fa64c18",
            "64a08fffe23f7c59"
        ],
        "x": 54,
        "y": 59,
        "w": 1012,
        "h": 302
    },
    {
        "id": "07c9f6dd467a782e",
        "type": "group",
        "z": "8aa1eea5c21e7d1c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "35aaa9130d19d231",
            "cfa87ae73b073d3a",
            "0cae796194415cf7",
            "eb22878fb3c54932",
            "9132d09c0cf237f4",
            "042e412376bb9462",
            "2c286b87ed11d004",
            "a856635bf67ade94",
            "75a6d6478597ac10",
            "643f3820a61775eb"
        ],
        "x": 54,
        "y": 359,
        "w": 732,
        "h": 282
    },
    {
        "id": "4288dd7f10ed06f1",
        "type": "mqtt-broker",
        "name": "DockerMosquitto",
        "broker": "172.17.0.1",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "30",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "control/logtransfer",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "false",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7e3ed11dbc74e62a",
        "type": "ui_tab",
        "name": "Control and Stream",
        "icon": "cast_connected",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f1af8a5a08283ddd",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#e2007a",
                "baseFont": "Verdana,Verdana,Geneva,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#006d8f",
                "baseFont": "Verdana,Verdana,Geneva,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#e2007a",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#006d8f",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#006d8f",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#00a7db",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#006d8f",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "Verdana,Verdana,Geneva,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "lime",
                "accents": "indigo",
                "warn": "red",
                "background": "blue-grey",
                "palette": "dark"
            }
        },
        "site": {
            "name": "DataDrivenSailing Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD.MM.YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "54d13dac95332b0c",
        "type": "ui_group",
        "name": "Check",
        "tab": "7e3ed11dbc74e62a",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7d9320f5c935209b",
        "type": "ui_tab",
        "name": "Analysis Preparation",
        "icon": "vertical_align_center",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7b134827c965229c",
        "type": "ui_group",
        "name": "Boat Tracker ",
        "tab": "7d9320f5c935209b",
        "order": 2,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "120a1faa40e58151",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB Docker",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://172.17.0.1:8087",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "0f8ecdadc130095d",
        "type": "global-config",
        "name": "global-config",
        "env": [
            {
                "name": "InfluxDB_org",
                "value": "myorg",
                "type": "str"
            },
            {
                "name": "InfluxDB_API-Token",
                "value": "_6hmHZ85JSySZsf_bs86wXoBscFosLKSoHxsq_I8ghj9HrVzNyJNf0YMABaDOnZxls5LL5DDeOZedVjBJOclxw==",
                "type": "str"
            },
            {
                "name": "InfluxDB_Bucket_BoatLog",
                "value": "BoatLog",
                "type": "str"
            }
        ]
    },
    {
        "id": "ee88c819b28397fa",
        "type": "ui_group",
        "name": "Control",
        "tab": "7e3ed11dbc74e62a",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a3fb06f46f46e5a5",
        "type": "ui_group",
        "name": "Log Transfer",
        "tab": "7e3ed11dbc74e62a",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d5d298e911f8315b",
        "type": "ui_group",
        "name": "Hub",
        "tab": "7d9320f5c935209b",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "95fa2778082242ee",
        "type": "ui_tab",
        "name": "Story",
        "icon": "touch_app",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e2c97ead8397c075",
        "type": "ui_group",
        "name": "Comment",
        "tab": "95fa2778082242ee",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f54ecf5aa78bbd72",
        "type": "ui_group",
        "name": "Marker",
        "tab": "95fa2778082242ee",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "15a5a15c776c0864",
        "type": "ui_tab",
        "name": "Delete",
        "icon": "delete_forever",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "471d1e3778805fa2",
        "type": "ui_tab",
        "name": "Phone Integration",
        "icon": "phone_iphone",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "bfa8af220bdc2c3c",
        "type": "ui_group",
        "name": "Hub Delete",
        "tab": "15a5a15c776c0864",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "53631adca2dab537",
        "type": "ui_group",
        "name": "Tracker Delete",
        "tab": "15a5a15c776c0864",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "476fa773b7bfdf2e",
        "type": "ui_tab",
        "name": "Wind",
        "icon": "wb_cloudy",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "baf37660cc1566a0",
        "type": "ui_group",
        "name": "Windspeed",
        "tab": "476fa773b7bfdf2e",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9fcd7d230c83dda0",
        "type": "ui_group",
        "name": "Wind direction",
        "tab": "476fa773b7bfdf2e",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e4b8f6a0248ef87d",
        "type": "mqtt out",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "name": "boatcontrol",
        "topic": "boatcontrol",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4288dd7f10ed06f1",
        "x": 970,
        "y": 160,
        "wires": []
    },
    {
        "id": "397c1506decea8fd",
        "type": "function",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "name": "create dict",
        "func": "// Initialize the state object if it doesn't exist yet.\nlet state = context.get('state') || { streamdata: true, logdata: true, deletelog: false };\n\n// If the incoming message has a topic and a boolean payload, update the corresponding state.\n// (ui_switch nodes output a boolean in msg.payload)\nif (msg.topic && typeof msg.payload === 'boolean') {\n    // Use the topic as the key to update the switch state.\n    state[msg.topic] = msg.payload;\n    // Save the updated state back into context.\n    context.set('state', state);\n}\n\n// Set the output payload as the current state dictionary.\nmsg.payload = state;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 160,
        "wires": [
            [
                "e4b8f6a0248ef87d",
                "21e88280f76cd19a"
            ]
        ]
    },
    {
        "id": "b052878629053aa3",
        "type": "ui_switch",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "name": "",
        "label": "Boat - Log data",
        "tooltip": "",
        "group": "ee88c819b28397fa",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "logdata",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 480,
        "y": 220,
        "wires": [
            [
                "397c1506decea8fd"
            ]
        ]
    },
    {
        "id": "1b9bc9dde11f2073",
        "type": "ui_switch",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "name": "",
        "label": "Boat - Deletelog",
        "tooltip": "",
        "group": "53631adca2dab537",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "deletelog",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 480,
        "y": 320,
        "wires": [
            [
                "397c1506decea8fd",
                "64a08fffe23f7c59"
            ]
        ]
    },
    {
        "id": "21e88280f76cd19a",
        "type": "debug",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 220,
        "wires": []
    },
    {
        "id": "84981f489f4c65e5",
        "type": "inject",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "name": "Set switch to \"on\" at Startup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 220,
        "y": 160,
        "wires": [
            [
                "b052878629053aa3",
                "e405c7cb1fa64c18"
            ]
        ]
    },
    {
        "id": "859d63a123d49e0b",
        "type": "inject",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "name": "Send every second",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 520,
        "y": 100,
        "wires": [
            [
                "397c1506decea8fd"
            ]
        ]
    },
    {
        "id": "c06b2a91579d9c3d",
        "type": "mqtt in",
        "z": "8aa1eea5c21e7d1c",
        "g": "beb3a915ca0cda00",
        "name": "",
        "topic": "boatcontrol",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4288dd7f10ed06f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1330,
        "y": 180,
        "wires": [
            [
                "3e738ad5327fe520",
                "eef23693638c20e9",
                "1da843bb1c5cf1fd"
            ]
        ]
    },
    {
        "id": "3e738ad5327fe520",
        "type": "ui_text",
        "z": "8aa1eea5c21e7d1c",
        "d": true,
        "g": "beb3a915ca0cda00",
        "group": "ee88c819b28397fa",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "streamdata",
        "label": "",
        "format": "{{msg.payload.streamdata}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1590,
        "y": 120,
        "wires": []
    },
    {
        "id": "eef23693638c20e9",
        "type": "ui_text",
        "z": "8aa1eea5c21e7d1c",
        "d": true,
        "g": "beb3a915ca0cda00",
        "group": "ee88c819b28397fa",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "logdata",
        "label": "",
        "format": "{{msg.payload.logdata}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1580,
        "y": 180,
        "wires": []
    },
    {
        "id": "1da843bb1c5cf1fd",
        "type": "ui_text",
        "z": "8aa1eea5c21e7d1c",
        "d": true,
        "g": "beb3a915ca0cda00",
        "group": "ee88c819b28397fa",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "deletelog",
        "label": "",
        "format": "{{msg.payload.deletelog}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1580,
        "y": 240,
        "wires": []
    },
    {
        "id": "35aaa9130d19d231",
        "type": "ui_table",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "group": "54d13dac95332b0c",
        "name": "Status Control Table",
        "order": 6,
        "width": "8",
        "height": "4",
        "columns": [
            {
                "field": "identifier",
                "title": "id",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "streamdata",
                "title": "streamdata",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "logdata",
                "title": "logdata",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "deletelog",
                "title": "deletelog",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 560,
        "y": 480,
        "wires": []
    },
    {
        "id": "cfa87ae73b073d3a",
        "type": "mqtt in",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "name": "",
        "topic": "boatstatus",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4288dd7f10ed06f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 440,
        "wires": [
            [
                "0cae796194415cf7",
                "042e412376bb9462",
                "75a6d6478597ac10"
            ]
        ]
    },
    {
        "id": "0cae796194415cf7",
        "type": "function",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "name": "ParseStatus",
        "func": "// Get the identifier, streamdata, and logdata from the incoming payload\nvar identifier = msg.payload.identifier || \"unknown\";  // default to \"unknown\" if identifier is missing\nvar streamdata = msg.payload.streamdata !== undefined ? msg.payload.streamdata : false;  // default to false if streamdata is missing\nvar logdata = msg.payload.logdata !== undefined ? msg.payload.logdata : false;  // default to false if logdata is missing\n\n// Create a message to be sent to InfluxDB\nvar message = {\n    identifier: identifier,\n    streamdata: streamdata,\n    logdata: logdata\n};\n\n// Add any additional optional fields if they exist\nif (msg.payload.hasOwnProperty(\"extraField1\")) {\n    message.extraField1 = msg.payload.extraField1;\n}\nif (msg.payload.hasOwnProperty(\"extraField2\")) {\n    message.extraField2 = msg.payload.extraField2;\n}\n\n// Set the processed message and identifier for tracking\nmsg.payload = message;\nmsg.measurement = identifier;  // Use identifier as measurement name\n\n// Return the message for further processing\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 560,
        "wires": [
            [
                "eb22878fb3c54932",
                "9132d09c0cf237f4"
            ]
        ]
    },
    {
        "id": "eb22878fb3c54932",
        "type": "influxdb out",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "influxdb": "120a1faa40e58151",
        "name": "Status to InfluxDB",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "myorg",
        "bucket": "BoatStatus",
        "x": 550,
        "y": 560,
        "wires": []
    },
    {
        "id": "9132d09c0cf237f4",
        "type": "debug",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 600,
        "wires": []
    },
    {
        "id": "042e412376bb9462",
        "type": "function",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "name": "function 4",
        "func": "// Initialize flow variable if it doesn't exist\nif (!flow.dataList) {\n    flow.dataList = [];\n}\n\n// Extract identifier and other values from the payload\nvar identifier = msg.payload.identifier || \"unknown\";  // Default to \"unknown\" if identifier is missing\n\n// Explicitly check for undefined and log the result\nvar streamdata = (msg.payload.hasOwnProperty('streamdata')) ? msg.payload.streamdata : \"undefined\";\nvar logdata = (msg.payload.hasOwnProperty('logdata')) ? msg.payload.logdata : \"undefined\";\nvar deletelog = (msg.payload.hasOwnProperty('deletelogstatus')) ? msg.payload.deletelogstatus : \"undefined\";\n\n// Print out the values for debugging\n//node.warn(`Received data: identifier=${identifier}, streamdata=${streamdata}, logdata=${logdata}`);\n\n// Create an object to store the row data\nvar row = {\n    identifier: identifier,\n    streamdata: streamdata,  // Directly use the value or \"undefined\"\n    logdata: logdata,  // Directly use the value or \"undefined\"\n    deletelog: deletelog\n};\n\n// Check if the identifier is already in the list\nvar index = flow.dataList.findIndex(item => item.identifier === identifier);\n\nif (index === -1) {\n    // If not found, push a new row\n    flow.dataList.push(row);\n} else {\n    // If found, update the existing row\n    flow.dataList[index] = row;\n}\n\n// Set the message to pass to the table\nmsg.payload = flow.dataList;\n\n// Return the message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 440,
        "wires": [
            [
                "2c286b87ed11d004",
                "35aaa9130d19d231",
                "643f3820a61775eb"
            ]
        ]
    },
    {
        "id": "2c286b87ed11d004",
        "type": "debug",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 440,
        "wires": []
    },
    {
        "id": "a856635bf67ade94",
        "type": "ui_text",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "group": "54d13dac95332b0c",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Controllstatus (last send from Tracker):",
        "format": "",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "Verdana,Verdana,Geneva,sans-serif",
        "fontSize": "18",
        "color": "#000000",
        "x": 610,
        "y": 400,
        "wires": []
    },
    {
        "id": "e405c7cb1fa64c18",
        "type": "ui_switch",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "name": "",
        "label": "Boat - Stream data",
        "tooltip": "",
        "group": "ee88c819b28397fa",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "streamdata",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 490,
        "y": 160,
        "wires": [
            [
                "397c1506decea8fd"
            ]
        ]
    },
    {
        "id": "4a050105971c6afa",
        "type": "http request",
        "z": "8aa1eea5c21e7d1c",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://172.17.0.1:5000/ping",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1250,
        "y": 740,
        "wires": [
            [
                "c97ea9b9048d432e",
                "29fe646c7c233a80"
            ]
        ]
    },
    {
        "id": "c97ea9b9048d432e",
        "type": "debug",
        "z": "8aa1eea5c21e7d1c",
        "name": "debug 11",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1480,
        "y": 680,
        "wires": []
    },
    {
        "id": "a7fd622bf5388348",
        "type": "function",
        "z": "8aa1eea5c21e7d1c",
        "name": "function 6",
        "func": "// Extract the `_value` field from each object and create an array of messages\nlet messages = msg.payload.map(item => {\n    return { payload: { device: item._value } };\n});\n\n// Return multiple messages (one per device)\nreturn [messages];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 740,
        "wires": [
            [
                "4a050105971c6afa"
            ]
        ]
    },
    {
        "id": "929ef1be54abc282",
        "type": "ui_table",
        "z": "8aa1eea5c21e7d1c",
        "group": "54d13dac95332b0c",
        "name": "",
        "order": 4,
        "width": "8",
        "height": "4",
        "columns": [
            {
                "field": "id",
                "title": "id",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "ping",
                "title": "ping",
                "width": "20%",
                "align": "left",
                "formatter": "color",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1570,
        "y": 740,
        "wires": []
    },
    {
        "id": "29fe646c7c233a80",
        "type": "function",
        "z": "8aa1eea5c21e7d1c",
        "name": "function 7",
        "func": "// Retrieve the existing table data from context storage\nlet tableData = context.get(\"tableData\") || [];\n\n// Check if the device already exists in the table\nlet existingIndex = tableData.findIndex(entry => entry.id === msg.payload.id);\n\n// Determine color (green if true, red if false)\nlet color = msg.payload.ping ? \"#00FF00\" : \"#FF0000\"; // Green if true, Red if false\n\nif (existingIndex !== -1) {\n    // Update existing device status\n    tableData[existingIndex] = {\n        id: msg.payload.id,\n        ping: color // Send only the HEX color code\n    };\n} else {\n    // Add new device entry\n    tableData.push({\n        id: msg.payload.id,\n        ping: color // Send only the HEX color code\n    });\n}\n\n// Store the updated table data\ncontext.set(\"tableData\", tableData);\n\n// **Force refresh by sending an empty payload first**\nnode.send({ payload: [] });\n\n// Wait 50ms and then send the updated table data\nsetTimeout(() => {\n    node.send({ payload: tableData });\n}, 50);\n\n// Do not return msg, as we are sending two separate messages\nreturn;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 740,
        "wires": [
            [
                "929ef1be54abc282"
            ]
        ]
    },
    {
        "id": "46fad8091d1672ce",
        "type": "function",
        "z": "8aa1eea5c21e7d1c",
        "name": "function 8",
        "func": "// Count the number of devices\nlet deviceCount = msg.payload.length;\n\n// Return the count as payload\nmsg.payload = { device_count: deviceCount };\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 680,
        "wires": [
            [
                "71c97fd620dc39f3"
            ]
        ]
    },
    {
        "id": "71c97fd620dc39f3",
        "type": "ui_text",
        "z": "8aa1eea5c21e7d1c",
        "group": "54d13dac95332b0c",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Devices connected",
        "format": "{{msg.payload.device_count}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1250,
        "y": 680,
        "wires": []
    },
    {
        "id": "2222add214a27fc5",
        "type": "inject",
        "z": "8aa1eea5c21e7d1c",
        "name": "Auto Trigger Every 60s",
        "props": [],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "20",
        "topic": "",
        "x": 190,
        "y": 680,
        "wires": [
            [
                "196af248fc757735"
            ]
        ]
    },
    {
        "id": "196af248fc757735",
        "type": "ui_switch",
        "z": "8aa1eea5c21e7d1c",
        "name": "Hub - Ping Tracker",
        "label": "Hub - Ping Tracker",
        "tooltip": "",
        "group": "ee88c819b28397fa",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 510,
        "y": 680,
        "wires": [
            [
                "bcb66cbc9f78c58e"
            ]
        ]
    },
    {
        "id": "bcb66cbc9f78c58e",
        "type": "influxdb in",
        "z": "8aa1eea5c21e7d1c",
        "influxdb": "120a1faa40e58151",
        "name": "Fetch Devices from InfluxDB",
        "query": "import \"influxdata/influxdb/schema\"\nschema.measurements(bucket: \"BoatStatus\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "myorg",
        "x": 800,
        "y": 680,
        "wires": [
            [
                "46fad8091d1672ce",
                "a7fd622bf5388348"
            ]
        ]
    },
    {
        "id": "d8d9ac7b7fad2e1d",
        "type": "inject",
        "z": "8aa1eea5c21e7d1c",
        "name": "Default true on startup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 200,
        "y": 740,
        "wires": [
            [
                "196af248fc757735"
            ]
        ]
    },
    {
        "id": "64a08fffe23f7c59",
        "type": "Invert",
        "z": "8aa1eea5c21e7d1c",
        "g": "0e151f65fcc2bf1c",
        "name": "Invert",
        "x": 290,
        "y": 260,
        "wires": [
            [
                "b052878629053aa3"
            ]
        ]
    },
    {
        "id": "75a6d6478597ac10",
        "type": "debug",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 220,
        "y": 600,
        "wires": []
    },
    {
        "id": "643f3820a61775eb",
        "type": "ui_table",
        "z": "8aa1eea5c21e7d1c",
        "g": "07c9f6dd467a782e",
        "group": "53631adca2dab537",
        "name": "Status Control Table",
        "order": 6,
        "width": "8",
        "height": "4",
        "columns": [
            {
                "field": "identifier",
                "title": "id",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "streamdata",
                "title": "streamdata",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "logdata",
                "title": "logdata",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "deletelog",
                "title": "deletelog",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 560,
        "y": 520,
        "wires": []
    },
    {
        "id": "8ff736e4d3b5869d",
        "type": "mqtt in",
        "z": "6d74585e23cec175",
        "name": "boatlive",
        "topic": "boatlive",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4288dd7f10ed06f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 480,
        "wires": [
            [
                "5f18f4afd967a6ee",
                "f97db8a8cab0adea",
                "cd3a16086bed309d",
                "2ffedccf0f404f1e"
            ]
        ]
    },
    {
        "id": "5f18f4afd967a6ee",
        "type": "debug",
        "z": "6d74585e23cec175",
        "name": "Debug_Print incoming messages",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 540,
        "wires": []
    },
    {
        "id": "f97db8a8cab0adea",
        "type": "function",
        "z": "6d74585e23cec175",
        "name": "CountMessages_Overall",
        "func": "// make sure the payload is an array\n// if it's not, wrap it in an array\nlet messages = msg.payload;\nif (!Array.isArray(messages)) {\n    messages = [messages];\n}\n\n// retrieve the current overall count from the node's context\nlet overallCount = context.get('overallCount') || 0;\n\n// process each message in the array\nmessages.forEach(function () {\n    // increment the overall message count\n    overallCount++;\n});\n\n// save the updated overall count back to the context\ncontext.set('overallCount', overallCount);\n\n// attach the overall count to the outgoing message\nmsg.payload = { overallCount: overallCount };\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 600,
        "wires": [
            [
                "052596940a30957d",
                "b8a5915312346964"
            ]
        ]
    },
    {
        "id": "052596940a30957d",
        "type": "ui_text",
        "z": "6d74585e23cec175",
        "group": "54d13dac95332b0c",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Overall messages received",
        "label": "Overall messages received",
        "format": "{{msg.payload.overallCount}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 900,
        "y": 580,
        "wires": []
    },
    {
        "id": "cd3a16086bed309d",
        "type": "function",
        "z": "6d74585e23cec175",
        "name": "CountMessages_ByID",
        "func": "// get the current timestamp\nlet now = Date.now();\n\n// make sure the payload is an array\nlet messages = msg.payload;\nif (!Array.isArray(messages)) {\n    messages = [messages];  // wrap into an array if it's not already\n}\n\n// retrieve the current counts and timestamps from the node's context\nlet trackerCount = context.get('trackerCount') || {};\nlet trackerTimestamps = context.get('trackerTimestamps') || {};\n\n// process each message in the array\nmessages.forEach(function (item) {\n    // Ensure that the 'id' property exists before accessing it\n    if (item && item.id) {\n        let trackerId = item.id;\n\n        // increment the count for this tracker\n        trackerCount[trackerId] = (trackerCount[trackerId] || 0) + 1;\n\n        // update last received timestamp for this tracker\n        trackerTimestamps[trackerId] = now;\n    }\n});\n\n// save the updated counts and timestamps back to the context\ncontext.set('trackerCount', trackerCount);\ncontext.set('trackerTimestamps', trackerTimestamps);\n\n// prepare table data for the ui_table\nlet tableData = [];\n\n// add a row for each tracker with color coding\nfor (let tracker in trackerCount) {\n    let lastReceived = trackerTimestamps[tracker] || 0;\n    let timeSinceLast = now - lastReceived;\n\n    // if the last message was received in the last 5 seconds, set color to green, otherwise red\n    let color = timeSinceLast <= 5000 ? \"#00FF00\" : \"#FF0000\";\n\n    tableData.push({ tracker: tracker, count: trackerCount[tracker], color: color });\n}\n\n// set the payload to the table data\nmsg.payload = tableData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 680,
        "wires": [
            [
                "5c3e29d344a20f1d",
                "2bf9fcab3238a6b0"
            ]
        ]
    },
    {
        "id": "2bf9fcab3238a6b0",
        "type": "ui_table",
        "z": "6d74585e23cec175",
        "group": "54d13dac95332b0c",
        "name": "TableOutput",
        "order": 2,
        "width": "8",
        "height": "4",
        "columns": [
            {
                "field": "tracker",
                "title": "Tracker",
                "width": "40%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "count",
                "title": "Count",
                "width": "40%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "color",
                "title": "Last5Seconds",
                "width": "20%",
                "align": "left",
                "formatter": "color",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 850,
        "y": 680,
        "wires": []
    },
    {
        "id": "5c3e29d344a20f1d",
        "type": "debug",
        "z": "6d74585e23cec175",
        "name": "Debug_TableOutput",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 720,
        "wires": []
    },
    {
        "id": "b8a5915312346964",
        "type": "debug",
        "z": "6d74585e23cec175",
        "name": "Debug_OverallCount",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 620,
        "wires": []
    },
    {
        "id": "efe5b84b4740e738",
        "type": "debug",
        "z": "6d74585e23cec175",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 460,
        "wires": []
    },
    {
        "id": "63f780eaa8800799",
        "type": "function",
        "z": "6d74585e23cec175",
        "name": "ParseFunction",
        "func": "let data = msg.payload;\n\n// Only proceed if data.validtime === true\nif (data.validtime !== true) {\n    // Stop processing and do not send a message forward\n    return null;\n}\n\n// If validtime is true, build your message\nlet message = {\n    batvolt: parseFloat(data.batvolt) || null,\n    batperc: parseFloat(data.batperc) || null,\n    HDOP: parseFloat(data.HDOP) || null,\n    alt: parseFloat(data.alt) || null,\n    nSat: parseInt(data.nSat, 10) || null,\n    SOG: parseFloat(data.SOG) || null,\n    lat: parseFloat(data.lat) || null,\n    long: parseFloat(data.long) || null,\n    fixQ: parseInt(data.fixQ, 10) || null,\n    validtime: data.validtime === true ? 1 : 0,\n    COG: data.COG || null,\n    status: data.status || null,\n    time: new Date(data.datetime).getTime() || null,\n    id: data.id || null\n};\n\nmsg.payload = message;\nmsg.measurement = data.id;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 480,
        "wires": [
            [
                "efe5b84b4740e738",
                "d7f382d20dca7732"
            ]
        ]
    },
    {
        "id": "d7f382d20dca7732",
        "type": "influxdb out",
        "z": "6d74585e23cec175",
        "influxdb": "120a1faa40e58151",
        "name": "InfluxDB_In",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "myorg",
        "bucket": "BoatLog",
        "x": 910,
        "y": 500,
        "wires": []
    },
    {
        "id": "2ffedccf0f404f1e",
        "type": "function",
        "z": "6d74585e23cec175",
        "name": "Split if Array",
        "func": "// Check if the payload is an array\nif (Array.isArray(msg.payload)) {\n    // If it's an array, process each element\n    let messages = msg.payload.map(data => {\n        // If data is a JSON string, parse it\n        if (typeof data === \"string\") {\n            try {\n                data = JSON.parse(data);\n            } catch (error) {\n                node.warn(\"Invalid JSON format: \" + data);\n                return null; // Skip invalid entries\n            }\n        }\n        return { payload: data };\n    });\n\n    // Remove any null (invalid) messages\n    messages = messages.filter(msg => msg !== null);\n\n    return [messages];  // Return an array of messages\n\n} else {\n    // If the payload is not an array (it's a single object), process it\n    if (typeof msg.payload === \"string\") {\n        try {\n            msg.payload = JSON.parse(msg.payload); // Try parsing if it's a string\n        } catch (error) {\n            node.warn(\"Invalid JSON format: \" + msg.payload);\n            return null; // Skip if invalid JSON\n        }\n    }\n\n    // Return the single message as an array (so it can be processed like an array)\n    return [{ payload: msg.payload }];\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 480,
        "wires": [
            [
                "63f780eaa8800799"
            ]
        ]
    },
    {
        "id": "9d7624ef87a7bc6d",
        "type": "inject",
        "z": "6d74585e23cec175",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 410,
        "y": 740,
        "wires": [
            [
                "cd3a16086bed309d"
            ]
        ]
    },
    {
        "id": "a69da3f584819fb1",
        "type": "mqtt in",
        "z": "6d74585e23cec175",
        "name": "hublive",
        "topic": "hublive",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4288dd7f10ed06f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 740,
        "wires": [
            [
                "b06f5e5a92639a23",
                "9ba963412c450794",
                "f97db8a8cab0adea",
                "cd3a16086bed309d"
            ]
        ]
    },
    {
        "id": "b06f5e5a92639a23",
        "type": "debug",
        "z": "6d74585e23cec175",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 820,
        "wires": []
    },
    {
        "id": "9ba963412c450794",
        "type": "function",
        "z": "6d74585e23cec175",
        "name": "Split if Array",
        "func": "// Check if the payload is an array\nif (Array.isArray(msg.payload)) {\n    // If it's an array, process each element\n    let messages = msg.payload.map(data => {\n        // If data is a JSON string, parse it\n        if (typeof data === \"string\") {\n            try {\n                data = JSON.parse(data);\n            } catch (error) {\n                node.warn(\"Invalid JSON format: \" + data);\n                return null; // Skip invalid entries\n            }\n        }\n        return { payload: data };\n    });\n\n    // Remove any null (invalid) messages\n    messages = messages.filter(msg => msg !== null);\n\n    return [messages];  // Return an array of messages\n\n} else {\n    // If the payload is not an array (it's a single object), process it\n    if (typeof msg.payload === \"string\") {\n        try {\n            msg.payload = JSON.parse(msg.payload); // Try parsing if it's a string\n        } catch (error) {\n            node.warn(\"Invalid JSON format: \" + msg.payload);\n            return null; // Skip if invalid JSON\n        }\n    }\n\n    // Return the single message as an array (so it can be processed like an array)\n    return [{ payload: msg.payload }];\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 860,
        "wires": [
            [
                "44e186b03635db82"
            ]
        ]
    },
    {
        "id": "44e186b03635db82",
        "type": "function",
        "z": "6d74585e23cec175",
        "name": "ParseFunction",
        "func": "// If the message comes from the ui_switch node, it will have a boolean payload.\nif (typeof msg.payload === \"boolean\") {\n    // Update the flow context variable \"hubLog\" with the new switch state.\n    flow.set(\"hubLog\", msg.payload);\n    // Do not pass any further message.\n    return null;\n}\n\n// Get the current logging state (defaults to false if not set)\nvar hubLog = flow.get(\"hubLog\") || false;\n\n// If logging is disabled, do not process the sensor data.\nif (!hubLog) {\n    return null;\n}\n\nlet data = msg.payload;\n\n// Only proceed if data.validtime === true\nif (data.validtime !== true) {\n    // Stop processing and do not send a message forward\n    return null;\n}\n\n// If validtime is true, build your message\nlet message = {\n    HDOP: parseFloat(data.HDOP) || null,\n    alt: parseFloat(data.alt) || null,\n    nSat: parseInt(data.nSat, 10) || null,\n    SOG: parseFloat(data.SOG) || null,\n    lat: parseFloat(data.lat) || null,\n    long: parseFloat(data.long) || null,\n    fixQ: parseInt(data.fixQ, 10) || null,\n    validtime: data.validtime === true ? 1 : 0,\n    COG: data.COG || \"\",\n    status: data.status || \"\",\n    time: new Date(data.datetime).getTime() || null\n};\n\nmsg.payload = message;\nmsg.measurement = data.id;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 860,
        "wires": [
            [
                "0dcfc7573f99a075",
                "c78ba9ebc6351983"
            ]
        ]
    },
    {
        "id": "c78ba9ebc6351983",
        "type": "influxdb out",
        "z": "6d74585e23cec175",
        "influxdb": "120a1faa40e58151",
        "name": "InfluxDB_In",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "myorg",
        "bucket": "HubLog",
        "x": 910,
        "y": 900,
        "wires": []
    },
    {
        "id": "0dcfc7573f99a075",
        "type": "debug",
        "z": "6d74585e23cec175",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 860,
        "wires": []
    },
    {
        "id": "6810acc28bd84278",
        "type": "ui_switch",
        "z": "6d74585e23cec175",
        "name": "Hub - Log data",
        "label": "Hub - Log data",
        "tooltip": "",
        "group": "ee88c819b28397fa",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 620,
        "y": 960,
        "wires": [
            [
                "44e186b03635db82"
            ]
        ]
    },
    {
        "id": "243b4977c0055b0e",
        "type": "inject",
        "z": "6d74585e23cec175",
        "name": "Set switch to \"on\" at Startup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 380,
        "y": 980,
        "wires": [
            [
                "6810acc28bd84278"
            ]
        ]
    },
    {
        "id": "2941dd882c426227",
        "type": "mqtt in",
        "z": "6d74585e23cec175",
        "name": "buoyelive",
        "topic": "buoyelive",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4288dd7f10ed06f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 280,
        "wires": [
            [
                "39245c2889d1022b",
                "9f9c54325ee2de7a",
                "cd3a16086bed309d",
                "f97db8a8cab0adea"
            ]
        ]
    },
    {
        "id": "39245c2889d1022b",
        "type": "debug",
        "z": "6d74585e23cec175",
        "name": "Debug_Print incoming messages",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 340,
        "wires": []
    },
    {
        "id": "30864c1af38deb84",
        "type": "debug",
        "z": "6d74585e23cec175",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 260,
        "wires": []
    },
    {
        "id": "5a8cab427fbf053d",
        "type": "function",
        "z": "6d74585e23cec175",
        "name": "ParseFunction",
        "func": "let data = msg.payload;\n\n// Only proceed if data.validtime === true\nif (data.validtime !== true) {\n    // Stop processing and do not send a message forward\n    return null;\n}\n\n// If validtime is true, build your message\nlet message = {\n    batvolt: parseFloat(data.batvolt) || null,\n    batperc: parseFloat(data.batperc) || null,\n    HDOP: parseFloat(data.HDOP) || null,\n    alt: parseFloat(data.alt) || null,\n    nSat: parseInt(data.nSat, 10) || null,\n    SOG: parseFloat(data.SOG) || null,\n    lat: parseFloat(data.lat) || null,\n    long: parseFloat(data.long) || null,\n    fixQ: parseInt(data.fixQ, 10) || null,\n    validtime: data.validtime === true ? 1 : 0,\n    COG: data.COG || null,\n    status: data.status || null,\n    time: new Date(data.datetime).getTime() || null,\n    id: data.id || null\n};\n\nmsg.payload = message;\nmsg.measurement = data.id;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 280,
        "wires": [
            [
                "30864c1af38deb84",
                "15b762db0240444e"
            ]
        ]
    },
    {
        "id": "15b762db0240444e",
        "type": "influxdb out",
        "z": "6d74585e23cec175",
        "influxdb": "120a1faa40e58151",
        "name": "InfluxDB_In",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "myorg",
        "bucket": "BuoyeLog",
        "x": 890,
        "y": 300,
        "wires": []
    },
    {
        "id": "9f9c54325ee2de7a",
        "type": "function",
        "z": "6d74585e23cec175",
        "name": "Split if Array",
        "func": "// Check if the payload is an array\nif (Array.isArray(msg.payload)) {\n    // If it's an array, process each element\n    let messages = msg.payload.map(data => {\n        // If data is a JSON string, parse it\n        if (typeof data === \"string\") {\n            try {\n                data = JSON.parse(data);\n            } catch (error) {\n                node.warn(\"Invalid JSON format: \" + data);\n                return null; // Skip invalid entries\n            }\n        }\n        return { payload: data };\n    });\n\n    // Remove any null (invalid) messages\n    messages = messages.filter(msg => msg !== null);\n\n    return [messages];  // Return an array of messages\n\n} else {\n    // If the payload is not an array (it's a single object), process it\n    if (typeof msg.payload === \"string\") {\n        try {\n            msg.payload = JSON.parse(msg.payload); // Try parsing if it's a string\n        } catch (error) {\n            node.warn(\"Invalid JSON format: \" + msg.payload);\n            return null; // Skip if invalid JSON\n        }\n    }\n\n    // Return the single message as an array (so it can be processed like an array)\n    return [{ payload: msg.payload }];\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 280,
        "wires": [
            [
                "5a8cab427fbf053d"
            ]
        ]
    },
    {
        "id": "3445948354b61f97",
        "type": "debug",
        "z": "7805de2be92eb497",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1460,
        "y": 180,
        "wires": []
    },
    {
        "id": "4912862498d078a1",
        "type": "function",
        "z": "7805de2be92eb497",
        "name": "function 5",
        "func": "// Extract the `_value` field from each object and create an array of messages\nlet messages = msg.payload.map(item => {\n    return { payload: { device: item._value } };\n});\n\n// Return multiple messages (one per device)\nreturn [messages];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 340,
        "wires": [
            [
                "5f75bd5addcd2a4b"
            ]
        ]
    },
    {
        "id": "a5adbef194bd7434",
        "type": "ui_table",
        "z": "7805de2be92eb497",
        "group": "a3fb06f46f46e5a5",
        "name": "",
        "order": 3,
        "width": "8",
        "height": "4",
        "columns": [
            {
                "field": "",
                "title": "",
                "width": "5%",
                "align": "left",
                "formatter": "rownum",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "id",
                "title": "id",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "lastSync",
                "title": "lastSync",
                "width": "50%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "status",
                "title": "Status",
                "width": "20%",
                "align": "left",
                "formatter": "color",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1650,
        "y": 360,
        "wires": []
    },
    {
        "id": "3d58aabd91ca1a35",
        "type": "function",
        "z": "7805de2be92eb497",
        "name": "function 6",
        "func": "// Retrieve the existing table data from context storage\nlet tableData = context.get(\"tableData\") || [];\n\n// Ensure msg.payload is valid\nif (!msg.payload || !msg.payload.status) {\n    node.warn(\"Invalid payload received\");\n    return;\n}\n\n// Extract the device ID from the HTTP response\nlet deviceId = msg.payload.id || msg.payload.device || msg.device || \"Unknown Device\";\n\n// Ensure the device ID is formatted correctly\ndeviceId = deviceId.replace(\".local\", \"\");\n\n// Get sync status from the HTTP response\nlet status = msg.payload.status;  // \"success\" or \"error\"\n\n// Format timestamp in German format (DD.MM.YYYY HH:MM:SS)\nlet timestamp = new Date().toLocaleString(\"de-DE\", {\n    day: \"2-digit\",\n    month: \"2-digit\",\n    year: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\"\n});\n\n// Determine color: Green if success, Red if error\nlet color = (status === \"success\") ? \"#00FF00\" : \"#FF0000\";\n\n// Check if the device already exists in the table\nlet existingIndex = tableData.findIndex(entry => entry.id === deviceId);\n\nif (existingIndex !== -1) {\n    // Update existing entry\n    let lastSync = tableData[existingIndex].lastSync || \"No succesfull sync\";\n\n    if (status === \"success\") {\n        lastSync = timestamp;  // Only update timestamp if sync was successful\n    }\n\n    tableData[existingIndex] = {\n        id: deviceId,\n        lastSync: lastSync,\n        status: color\n    };\n} else {\n    // Add new device entry\n    tableData.push({\n        id: deviceId,\n        lastSync: status === \"success\" ? timestamp : \"No succesfull sync\",\n        status: color\n    });\n}\n\n// Store the updated table data in context\ncontext.set(\"tableData\", tableData);\n\n// **Force refresh by sending an empty payload first**\nnode.send({ payload: [] });\n\n// Wait 50ms and then send the updated table data\nsetTimeout(() => {\n    node.send({ payload: tableData });\n}, 50);\n\n// Do not return msg, as we are sending two separate messages\nreturn;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 360,
        "wires": [
            [
                "a5adbef194bd7434"
            ]
        ]
    },
    {
        "id": "4145d2c39de12387",
        "type": "function",
        "z": "7805de2be92eb497",
        "name": "function 7",
        "func": "// Count the number of devices\nlet deviceCount = msg.payload.length;\n\n// Return the count as payload\nmsg.payload = { device_count: deviceCount };\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 260,
        "wires": [
            [
                "fcdd659999154936"
            ]
        ]
    },
    {
        "id": "fcdd659999154936",
        "type": "ui_text",
        "z": "7805de2be92eb497",
        "group": "a3fb06f46f46e5a5",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Devices connected",
        "format": "{{msg.payload.device_count}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1170,
        "y": 260,
        "wires": []
    },
    {
        "id": "215ce34c4faf7d2d",
        "type": "inject",
        "z": "7805de2be92eb497",
        "name": "Auto Trigger Every 5min",
        "props": [],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "x": 190,
        "y": 280,
        "wires": [
            [
                "e5656e2047253b8e"
            ]
        ]
    },
    {
        "id": "e5656e2047253b8e",
        "type": "ui_switch",
        "z": "7805de2be92eb497",
        "name": "Hub - Rsync Tracker",
        "label": "Hub - Rsync Tracker",
        "tooltip": "",
        "group": "ee88c819b28397fa",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 460,
        "y": 300,
        "wires": [
            [
                "fc62b17ffd6c6aad"
            ]
        ]
    },
    {
        "id": "fc62b17ffd6c6aad",
        "type": "influxdb in",
        "z": "7805de2be92eb497",
        "influxdb": "120a1faa40e58151",
        "name": "Fetch Devices from InfluxDB",
        "query": "import \"influxdata/influxdb/schema\"\nschema.measurements(bucket: \"BoatStatus\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "myorg",
        "x": 720,
        "y": 300,
        "wires": [
            [
                "4145d2c39de12387",
                "4912862498d078a1"
            ]
        ]
    },
    {
        "id": "e5cdda1f0ecefa11",
        "type": "inject",
        "z": "7805de2be92eb497",
        "name": "Default true on startup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 200,
        "y": 340,
        "wires": [
            [
                "e5656e2047253b8e"
            ]
        ]
    },
    {
        "id": "5f75bd5addcd2a4b",
        "type": "http request",
        "z": "7805de2be92eb497",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://172.17.0.1:5000/rsync",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1190,
        "y": 340,
        "wires": [
            [
                "3445948354b61f97",
                "3d58aabd91ca1a35"
            ]
        ]
    },
    {
        "id": "c15dcdfa6da3de50",
        "type": "ui_button",
        "z": "7805de2be92eb497",
        "name": "",
        "group": "a3fb06f46f46e5a5",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Sync Now",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 510,
        "y": 400,
        "wires": [
            [
                "fc62b17ffd6c6aad"
            ]
        ]
    },
    {
        "id": "0b60e1dcc1c8cd92",
        "type": "inject",
        "z": "42fedc37cdaa024d",
        "name": "Trigger Export",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "8290fac13c8012ea"
            ]
        ]
    },
    {
        "id": "8290fac13c8012ea",
        "type": "exec",
        "z": "42fedc37cdaa024d",
        "command": "ls -1 /data/datarsync | grep 'datalog_.*\\.db'",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "List DB Files",
        "x": 340,
        "y": 220,
        "wires": [
            [
                "a144854534600778"
            ],
            [],
            []
        ]
    },
    {
        "id": "a144854534600778",
        "type": "function",
        "z": "42fedc37cdaa024d",
        "name": "SplitMessages",
        "func": "// Ensure msg.payload is valid\nif (!msg.payload || typeof msg.payload !== \"string\") {\n    node.warn(\"Invalid payload received\");\n    return null;\n}\n\n// Trim output and split by newline in case of multiple filenames\nlet filenames = msg.payload.trim().split(\"\\n\");\n\n// Filter out any empty values and invalid filenames\nfilenames = filenames.filter(name => name.startsWith(\"datalog_\") && name.endsWith(\".db\"));\n\n// Generate an array of messages\nlet messages = filenames.map(name => ({ payload: { filename: name } }));\n\n// Send each filename as a separate message\nreturn [messages];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 220,
        "wires": [
            [
                "233c3ea8994614bf",
                "1caa47fbc155cc63"
            ]
        ]
    },
    {
        "id": "233c3ea8994614bf",
        "type": "http request",
        "z": "42fedc37cdaa024d",
        "name": "Trigger Export via API",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://172.17.0.1:5000/export",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 860,
        "y": 220,
        "wires": [
            [
                "582cac2429a6d156",
                "1caa47fbc155cc63"
            ]
        ]
    },
    {
        "id": "9d110852a9290478",
        "type": "ui_button",
        "z": "42fedc37cdaa024d",
        "name": "",
        "group": "7b134827c965229c",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Create Analysis files",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "8290fac13c8012ea",
                "1caa47fbc155cc63"
            ]
        ]
    },
    {
        "id": "582cac2429a6d156",
        "type": "function",
        "z": "42fedc37cdaa024d",
        "name": "Update Table",
        "func": "// Retrieve existing table data from context\nlet tableData = context.get(\"tableData\") || [];\n\n// Validate input\nif (!msg.payload || !msg.payload.filename || !msg.payload.status) {\n    node.warn(\"Invalid API response or missing fields\");\n    return;\n}\n\n// Extract boat name (e.g. \"datalog_boat1.db\" -> \"boat1\")\nconst boatName = (msg.payload.filename.match(/^datalog_(.+)\\.db$/) || [])[1] || \"Unknown Device\";\n\n// Determine status (\"success\" or \"error\")\nconst status = msg.payload.status;\n\n// Format current timestamp (German locale)\nconst timestamp = new Date().toLocaleString(\"de-DE\", {\n    day: \"2-digit\",\n    month: \"2-digit\",\n    year: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\"\n});\n\n// Determine color (success = Green, error = Red)\nconst color = (status === \"success\") ? \"#00FF00\" : \"#FF0000\";\n\n// Find existing entry for this boat\nconst index = tableData.findIndex(entry => entry.id === boatName);\n\nif (index !== -1) {\n    // Update existing entry\n    if (status === \"success\") {\n        tableData[index].lastSync = timestamp;\n    }\n    tableData[index].status = color;\n} else {\n    // Create a new entry\n    tableData.push({\n        id: boatName,\n        lastSync: (status === \"success\") ? timestamp : \"No successful sync\",\n        status: color\n    });\n}\n\n// Store updated table data in context\ncontext.set(\"tableData\", tableData);\n\n// Wait 50ms and then send the updated table data\nsetTimeout(() => {\n    node.send({ payload: tableData });\n}, 50);\n\n// Pass updated table data along for the next node (ui_table)\nmsg.payload = tableData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 220,
        "wires": [
            [
                "64957892fe9fad7f"
            ]
        ]
    },
    {
        "id": "64957892fe9fad7f",
        "type": "ui_table",
        "z": "42fedc37cdaa024d",
        "group": "7b134827c965229c",
        "name": "Export Status Table",
        "order": 1,
        "width": 0,
        "height": 0,
        "columns": [
            {
                "field": "id",
                "title": "Device",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "lastSync",
                "title": "Last Sync",
                "width": "50%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "status",
                "title": "Status",
                "width": "20%",
                "align": "left",
                "formatter": "color",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1430,
        "y": 220,
        "wires": []
    },
    {
        "id": "3327d93588efd822",
        "type": "ui_text",
        "z": "42fedc37cdaa024d",
        "group": "7b134827c965229c",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "ProcessStatus",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 960,
        "y": 100,
        "wires": []
    },
    {
        "id": "1caa47fbc155cc63",
        "type": "function",
        "z": "42fedc37cdaa024d",
        "name": "Set ProcessingStatus",
        "func": "// Retrieve or initialize counters and current display text\nlet splitCount = context.get(\"splitCount\") || 0;\nlet httpCount = context.get(\"httpCount\") || 0;\nlet currentText = context.get(\"currentText\") || \"\";\n\n// -------------------------------------------------\n// Check what kind of message we received\n// -------------------------------------------------\n\n// 1) If the button was clicked: msg.payload == \"processing. Please wait!\"\nif (msg.payload === \"processing. Please wait!\") {\n    // Reset counts\n    splitCount = 0;\n    httpCount = 0;\n\n    // Display \"Processing\"\n    currentText = \"Processing\";\n}\n\n// 2) If this is a SplitMessages output (filename but no 'status')\nelse if (msg.payload && msg.payload.filename && !msg.payload.status) {\n    // Increase the total file count we expect\n    splitCount++;\n}\n\n// 3) If this is the HTTP response (filename + status)\nelse if (msg.payload && msg.payload.filename && msg.payload.status) {\n    // Increase the count of completed HTTP exports\n    httpCount++;\n\n    // Check if we've finished them all\n    if (splitCount > 0 && httpCount === splitCount) {\n        // Done\n        currentText = \"Done!\";\n\n        // Reset display after 5 seconds\n        setTimeout(() => {\n            // Send an empty string to the UI to clear the text\n            node.send({ payload: \"\" });\n            context.set(\"currentText\", \"\");\n        }, 5000);\n    }\n}\n\n// -------------------------------------------------\n// Save updated counters/text into context\n// -------------------------------------------------\ncontext.set(\"splitCount\", splitCount);\ncontext.set(\"httpCount\", httpCount);\ncontext.set(\"currentText\", currentText);\n\n// -------------------------------------------------\n// Output the current text to the UI Text node\n// -------------------------------------------------\nmsg.payload = currentText;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 100,
        "wires": [
            [
                "3327d93588efd822"
            ]
        ]
    },
    {
        "id": "18692c41c83f4091",
        "type": "ui_button",
        "z": "42fedc37cdaa024d",
        "name": "",
        "group": "bfa8af220bdc2c3c",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete Archive",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 440,
        "wires": [
            [
                "63dc9cb990257c6c"
            ]
        ]
    },
    {
        "id": "63dc9cb990257c6c",
        "type": "exec",
        "z": "42fedc37cdaa024d",
        "command": "find /data/dataexport/archive -mindepth 1 -delete",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Delete dataexport/archive",
        "x": 430,
        "y": 440,
        "wires": [
            [],
            [],
            [
                "2c16b294d3d7c4e8"
            ]
        ]
    },
    {
        "id": "b59c4f02f68f7f5b",
        "type": "ui_button",
        "z": "42fedc37cdaa024d",
        "name": "",
        "group": "bfa8af220bdc2c3c",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete Rsync Data",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 380,
        "wires": [
            [
                "327baeadee3896d7"
            ]
        ]
    },
    {
        "id": "327baeadee3896d7",
        "type": "exec",
        "z": "42fedc37cdaa024d",
        "command": "find /data/datarsync/ -mindepth 1 -delete",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Delete datarsync",
        "x": 410,
        "y": 380,
        "wires": [
            [],
            [],
            [
                "ed739cd0dcbd5868"
            ]
        ]
    },
    {
        "id": "f59ecf14f5932959",
        "type": "ui_text",
        "z": "42fedc37cdaa024d",
        "group": "bfa8af220bdc2c3c",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "DeleteStatus",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1050,
        "y": 440,
        "wires": []
    },
    {
        "id": "2c16b294d3d7c4e8",
        "type": "function",
        "z": "42fedc37cdaa024d",
        "name": "function 1",
        "func": "// Clone the original msg so we don't overwrite any properties we might need later\nlet newMsg = RED.util.cloneMessage(msg);\n\nif (msg.payload.code === 0) {\n    newMsg.payload = \"dataexport/archive deleted!\";\n} else if (msg.payload.code === 1) {\n    let errorMsg = msg.payload.message || \"Unknown error\";\n\n    // Check if error is \"No such file or directory\"\n    if (errorMsg.includes(\"No such file or directory\")) {\n        newMsg.payload = \"Error: No directory found!\";\n    } else {\n        newMsg.payload = \"Error: \" + errorMsg;\n    }\n} else {\n    // If code is neither 0 nor 1, handle as an unknown error (optional)\n    newMsg.payload = \"Error: Unexpected code.\";\n}\n\n// Send the result immediately\nnode.send(newMsg);\n\n// After 5 seconds, send a new message with an empty payload to reset the UI text\nsetTimeout(() => {\n    node.send({ payload: \"\" });\n}, 5000);\n\n// Do not return newMsg again; we've already sent it\nreturn;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 440,
        "wires": [
            [
                "f59ecf14f5932959"
            ]
        ]
    },
    {
        "id": "ed739cd0dcbd5868",
        "type": "function",
        "z": "42fedc37cdaa024d",
        "name": "function 2",
        "func": "// Clone the original msg so we don't overwrite any properties we might need later\nlet newMsg = RED.util.cloneMessage(msg);\n\nif (msg.payload.code === 0) {\n    newMsg.payload = \"datarsync deleted!\";\n} else if (msg.payload.code === 1) {\n    let errorMsg = msg.payload.message || \"Unknown error\";\n\n    // Check if error is \"No such file or directory\"\n    if (errorMsg.includes(\"No such file or directory\")) {\n        newMsg.payload = \"Error: No directory found!\";\n    } else {\n        newMsg.payload = \"Error: \" + errorMsg;\n    }\n} else {\n    // If code is neither 0 nor 1, handle as an unknown error (optional)\n    newMsg.payload = \"Error: Unexpected code.\";\n}\n\n// Send the result immediately\nnode.send(newMsg);\n\n// After 5 seconds, send a new message with an empty payload to reset the UI text\nsetTimeout(() => {\n    node.send({ payload: \"\" });\n}, 5000);\n\n// Do not return newMsg again; we've already sent it\nreturn;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 380,
        "wires": [
            [
                "f59ecf14f5932959",
                "ace358512031ba44"
            ]
        ]
    },
    {
        "id": "b81ff69465a7dc4f",
        "type": "ui_button",
        "z": "42fedc37cdaa024d",
        "name": "Delete dataexport files",
        "group": "bfa8af220bdc2c3c",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete dataexport files",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 180,
        "y": 520,
        "wires": [
            [
                "90eaf42c144b5c03"
            ]
        ]
    },
    {
        "id": "90eaf42c144b5c03",
        "type": "exec",
        "z": "42fedc37cdaa024d",
        "command": "find /data/dataexport -maxdepth 1 -type f -delete",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Delete dataexport/archive",
        "x": 430,
        "y": 520,
        "wires": [
            [],
            [],
            [
                "e3584ca79577c844"
            ]
        ]
    },
    {
        "id": "e3584ca79577c844",
        "type": "function",
        "z": "42fedc37cdaa024d",
        "name": "function 3",
        "func": "// Clone the original msg so we don't overwrite any properties we might need later\nlet newMsg = RED.util.cloneMessage(msg);\n\nif (msg.payload.code === 0) {\n    newMsg.payload = \"dataexport files deleted!\";\n} else if (msg.payload.code === 1) {\n    let errorMsg = msg.payload.message || \"Unknown error\";\n\n    // Check if error is \"No such file or directory\"\n    if (errorMsg.includes(\"No such file or directory\")) {\n        newMsg.payload = \"Error: No directory found!\";\n    } else {\n        newMsg.payload = \"Error: \" + errorMsg;\n    }\n} else {\n    // If code is neither 0 nor 1, handle as an unknown error (optional)\n    newMsg.payload = \"Error: Unexpected code.\";\n}\n\n// Send the result immediately\nnode.send(newMsg);\n\n// After 5 seconds, send a new message with an empty payload to reset the UI text\nsetTimeout(() => {\n    node.send({ payload: \"\" });\n}, 5000);\n\n// Do not return newMsg again; we've already sent it\nreturn;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 520,
        "wires": [
            [
                "f59ecf14f5932959"
            ]
        ]
    },
    {
        "id": "ace358512031ba44",
        "type": "function",
        "z": "42fedc37cdaa024d",
        "name": "function 9",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 320,
        "wires": [
            [
                "64957892fe9fad7f"
            ]
        ]
    },
    {
        "id": "57027a1d39bae8e8",
        "type": "ui_button",
        "z": "42fedc37cdaa024d",
        "name": "Create Buoyefile",
        "group": "d5d298e911f8315b",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Create Commentfile",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 740,
        "wires": [
            [
                "d7e667133570dfd4"
            ]
        ]
    },
    {
        "id": "d7e667133570dfd4",
        "type": "influxdb in",
        "z": "42fedc37cdaa024d",
        "influxdb": "120a1faa40e58151",
        "name": "",
        "query": "HubLog",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "myorg",
        "x": 580,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "4e5a92d7b3afb097",
        "type": "json",
        "z": "42fedc37cdaa024d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 870,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "0d01b9497d64f5ef",
        "type": "file",
        "z": "42fedc37cdaa024d",
        "name": "",
        "filename": "",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1140,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "cc0fab8d88dfd52c",
        "type": "influxdb out",
        "z": "dfc6be75c29e3d81",
        "influxdb": "120a1faa40e58151",
        "name": "Influx Comments",
        "measurement": "comments",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "myorg",
        "bucket": "Comments",
        "x": 1090,
        "y": 340,
        "wires": []
    },
    {
        "id": "45ecf11e7df1daa7",
        "type": "debug",
        "z": "dfc6be75c29e3d81",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 420,
        "wires": []
    },
    {
        "id": "e28d248a8ee362b1",
        "type": "function",
        "z": "dfc6be75c29e3d81",
        "name": "function 11",
        "func": "// Retrieve or initialize stored time and the \"stopped\" flag from node context\nlet currentTime = context.get(\"currentTime\") || new Date();\nlet stopped = context.get(\"stopped\") || false;\n\n// Check incoming payload\nswitch (msg.payload) {\n    case \"stoptime\":\n        // Toggle stop state\n        stopped = !stopped;\n        context.set(\"stopped\", stopped);\n        break;\n\n    case -10:\n        // Subtract 10 seconds from current time\n        currentTime.setSeconds(currentTime.getSeconds() - 10);\n        context.set(\"currentTime\", currentTime);\n        break;\n\n    default:\n        // If not stopped, update time to the real current system time\n        if (!stopped) {\n            currentTime = new Date();\n            context.set(\"currentTime\", currentTime);\n        }\n        break;\n}\n\n// Now get the possibly updated time from context\nlet now = context.get(\"currentTime\");\n\n// Build a human-readable timestamp in the format \"DD.MM.YYYY HH:mm:ss\"\nlet year = now.getFullYear();\nlet month = String(now.getMonth() + 1).padStart(2, \"0\");\nlet day = String(now.getDate()).padStart(2, \"0\");\nlet hours = String(now.getHours()).padStart(2, \"0\");\nlet minutes = String(now.getMinutes()).padStart(2, \"0\");\nlet seconds = String(now.getSeconds()).padStart(2, \"0\");\n\nlet readableTimestamp = `${day}.${month}.${year} ${hours}:${minutes}:${seconds}`;\n\n// --- Store BOTH the epoch and the readable time in flow context ---\nflow.set(\"stoppedTimeEpoch\", now.getTime());         // e.g., 1700000000000\nflow.set(\"stoppedTimeString\", readableTimestamp);    // e.g., \"14.02.2025 16:12:30\"\n\n// Also output the readable time to the UI text widget\nmsg.payload = { time: readableTimestamp };\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 280,
        "wires": [
            [
                "e38edc11d6b88c84",
                "cc0fab8d88dfd52c",
                "43afc6b09f199bef"
            ]
        ]
    },
    {
        "id": "e38edc11d6b88c84",
        "type": "ui_text",
        "z": "dfc6be75c29e3d81",
        "group": "e2c97ead8397c075",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload.time}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1090,
        "y": 220,
        "wires": []
    },
    {
        "id": "e70898258eced7f2",
        "type": "inject",
        "z": "dfc6be75c29e3d81",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "iso",
        "payloadType": "date",
        "x": 330,
        "y": 240,
        "wires": [
            [
                "e28d248a8ee362b1"
            ]
        ]
    },
    {
        "id": "a5d86884e5d1f854",
        "type": "ui_button",
        "z": "dfc6be75c29e3d81",
        "name": "",
        "group": "e2c97ead8397c075",
        "order": 2,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "stop/start time",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "stoptime",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 400,
        "y": 200,
        "wires": [
            [
                "e28d248a8ee362b1"
            ]
        ]
    },
    {
        "id": "764bbb7ff15c98bf",
        "type": "ui_button",
        "z": "dfc6be75c29e3d81",
        "name": "",
        "group": "e2c97ead8397c075",
        "order": 3,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "-10sec",
        "tooltip": "",
        "color": "",
        "bgcolor": "grey",
        "className": "",
        "icon": "",
        "payload": "-10",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 600,
        "y": 200,
        "wires": [
            [
                "e28d248a8ee362b1"
            ]
        ]
    },
    {
        "id": "675858dcae7073d1",
        "type": "ui_form",
        "z": "dfc6be75c29e3d81",
        "name": "",
        "label": "",
        "group": "e2c97ead8397c075",
        "order": 5,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Comment",
                "value": "comment",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "comment": ""
        },
        "payload": "",
        "submit": "save comment",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 290,
        "y": 380,
        "wires": [
            [
                "b3cb8581813948ad",
                "a21c2554a92d54e0"
            ]
        ]
    },
    {
        "id": "11cb6fa41491b1b4",
        "type": "function",
        "z": "dfc6be75c29e3d81",
        "name": "function 10",
        "func": "// Store the incoming payload (the comment or button text)\nlet comment = msg.payload;\n\n// Build the Influx data point. We will store the comment in a field\n// named \"comment\" and use the current time as our Influx timestamp.\nmsg.payload = \n    {\n        // You already set the measurement in the Influx Out node,\n        // so we can skip defining \"measurement\" here.\n\n\n        comment: \"important!\",\n        // Use current time in milliseconds\n        // (matches the \"ms\" precision in your Influx node config)\n        time: new Date().getTime()\n    };\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 460,
        "wires": [
            [
                "cc0fab8d88dfd52c",
                "45ecf11e7df1daa7"
            ]
        ]
    },
    {
        "id": "773e4b182d54ee32",
        "type": "ui_button",
        "z": "dfc6be75c29e3d81",
        "name": "Set Marker",
        "group": "f54ecf5aa78bbd72",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Set Marker",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 480,
        "wires": [
            [
                "11cb6fa41491b1b4",
                "b1478ec999e555e1"
            ]
        ]
    },
    {
        "id": "b3cb8581813948ad",
        "type": "function",
        "z": "dfc6be75c29e3d81",
        "name": "function 12",
        "func": "// \"comment\" comes from your UI form (msg.payload.comment)\nlet comment = msg.payload.comment;\n\n// Retrieve the \"stopped\" or displayed time from flow context\nlet storedEpoch = flow.get(\"stoppedTimeEpoch\") || new Date().getTime();\nlet storedString = flow.get(\"stoppedTimeString\") || \"\";\n\n// Build the Influx data point. \n// - We'll store the epoch time in the \"time\" property \n// - We'll also store a \"timeString\" for convenience, so you can see the readable time in Influx.\nmsg.payload = {\n    comment: comment,\n    time: storedEpoch,       // numeric epoch (ms) for Influx\n    timeString: storedString // optional readable string\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 380,
        "wires": [
            [
                "45ecf11e7df1daa7",
                "e28d248a8ee362b1"
            ]
        ]
    },
    {
        "id": "a850be6cd71fb32f",
        "type": "ui_text",
        "z": "dfc6be75c29e3d81",
        "group": "f54ecf5aa78bbd72",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "status marker",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 720,
        "y": 520,
        "wires": []
    },
    {
        "id": "b1478ec999e555e1",
        "type": "function",
        "z": "dfc6be75c29e3d81",
        "name": "function 13",
        "func": "// 1) Immediately send \"Successfully saved marker!\"\nmsg.payload = \"Successfully saved marker!\";\nnode.send(msg);\n\n// 2) Schedule a second message to clear the text after 5 seconds\nsetTimeout(() => {\n    let clearMsg = { payload: \"\" };\n    node.send(clearMsg);\n}, 5000);\n\n// 3) End the function without sending another message right now\nreturn;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 520,
        "wires": [
            [
                "a850be6cd71fb32f"
            ]
        ]
    },
    {
        "id": "7a030ed36247437c",
        "type": "ui_text",
        "z": "dfc6be75c29e3d81",
        "group": "e2c97ead8397c075",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "status comment",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 520,
        "y": 320,
        "wires": []
    },
    {
        "id": "a21c2554a92d54e0",
        "type": "function",
        "z": "dfc6be75c29e3d81",
        "name": "function 14",
        "func": "// 1) Immediately send \"Successfully saved marker!\"\nmsg.payload = \"Successfully saved comment!\";\nnode.send(msg);\n\n// 2) Schedule a second message to clear the text after 5 seconds\nsetTimeout(() => {\n    let clearMsg = { payload: \"\" };\n    node.send(clearMsg);\n}, 5000);\n\n// 3) End the function without sending another message right now\nreturn;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 320,
        "wires": [
            [
                "7a030ed36247437c"
            ]
        ]
    },
    {
        "id": "43afc6b09f199bef",
        "type": "debug",
        "z": "dfc6be75c29e3d81",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 280,
        "wires": []
    },
    {
        "id": "62afc8e9b0284991",
        "type": "mqtt in",
        "z": "cac41ceca32ba8f4",
        "name": "hublive",
        "topic": "hublive",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4288dd7f10ed06f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 240,
        "wires": [
            [
                "f252145cfbad1321",
                "ddfbf199c58e4f65",
                "65066aa50935f39f"
            ]
        ]
    },
    {
        "id": "ddfbf199c58e4f65",
        "type": "function",
        "z": "cac41ceca32ba8f4",
        "name": "Split if Array",
        "func": "// Check if the payload is an array\nif (Array.isArray(msg.payload)) {\n    // If it's an array, process each element\n    let messages = msg.payload.map(data => {\n        // If data is a JSON string, parse it\n        if (typeof data === \"string\") {\n            try {\n                data = JSON.parse(data);\n            } catch (error) {\n                node.warn(\"Invalid JSON format: \" + data);\n                return null; // Skip invalid entries\n            }\n        }\n        return { payload: data };\n    });\n\n    // Remove any null (invalid) messages\n    messages = messages.filter(msg => msg !== null);\n\n    return [messages];  // Return an array of messages\n\n} else {\n    // If the payload is not an array (it's a single object), process it\n    if (typeof msg.payload === \"string\") {\n        try {\n            msg.payload = JSON.parse(msg.payload); // Try parsing if it's a string\n        } catch (error) {\n            node.warn(\"Invalid JSON format: \" + msg.payload);\n            return null; // Skip if invalid JSON\n        }\n    }\n\n    // Return the single message as an array (so it can be processed like an array)\n    return [{ payload: msg.payload }];\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 280,
        "wires": [
            [
                "557e34db65adff2d",
                "3efad084a44a2143",
                "5a95e6d353ba1a13",
                "c5a7a57af05ac1a5",
                "330f2c8944cb2bc8"
            ]
        ]
    },
    {
        "id": "f252145cfbad1321",
        "type": "debug",
        "z": "cac41ceca32ba8f4",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 200,
        "wires": []
    },
    {
        "id": "557e34db65adff2d",
        "type": "function",
        "z": "cac41ceca32ba8f4",
        "name": "ParseFunction",
        "func": "// Process sensor data directly without checking for a switch\n\nlet data = msg.payload;\n\n// Only proceed if data.validtime === true\nif (data.validtime !== true) {\n    // Stop processing and do not send a message forward\n    return null;\n}\n\n// Build the message including additional wind and magnetic fields\nlet message = {\n    // Basic sensor data\n    HDOP: parseFloat(data.HDOP) || null,\n    alt: parseFloat(data.alt) || null,\n    nSat: parseInt(data.nSat, 10) || null,\n    SOG: parseFloat(data.SOG) || null,\n    lat: parseFloat(data.lat) || null,\n    long: parseFloat(data.long) || null,\n    fixQ: parseInt(data.fixQ, 10) || null,\n    validtime: data.validtime ? 1 : 0,\n    COG: data.COG || \"\",\n    status: data.status || \"\",\n    time: new Date(data.datetime).getTime() || null,\n\n    // Wind data\n    w_angle: parseFloat(data.w_angle) || null,\n    w_speed: parseFloat(data.w_speed) || null,\n    w_unit: data.w_unit || \"\",\n    w_status: data.w_status || \"\",\n    w_checksum: data.w_checksum || \"\",\n    w_speed_kts: parseFloat(data.w_speed_kts) || null,\n\n    // Magnetic field data\n    mag_x: parseFloat(data.mag_x) || null,\n    mag_y: parseFloat(data.mag_y) || null,\n    mag_z: parseFloat(data.mag_z) || null,\n\n    // Additional heading data\n    heading: parseFloat(data.heading) || null,\n    true_wind_dir: parseFloat(data.true_wind_dir) || null\n};\n\nmsg.payload = message;\nmsg.measurement = data.id;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 280,
        "wires": [
            [
                "91d87ce984bee544"
            ]
        ]
    },
    {
        "id": "91d87ce984bee544",
        "type": "debug",
        "z": "cac41ceca32ba8f4",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 260,
        "wires": []
    },
    {
        "id": "fab8bd20a3af2d2c",
        "type": "ui_gauge",
        "z": "cac41ceca32ba8f4",
        "name": "",
        "group": "baf37660cc1566a0",
        "order": 1,
        "width": "4",
        "height": "3",
        "gtype": "gage",
        "title": "Windspeed",
        "label": "knots",
        "format": "{{value}}",
        "min": 0,
        "max": "45",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "20",
        "seg2": "30",
        "diff": false,
        "className": "",
        "x": 890,
        "y": 380,
        "wires": []
    },
    {
        "id": "3efad084a44a2143",
        "type": "function",
        "z": "cac41ceca32ba8f4",
        "name": "ParseFunction",
        "func": "let data = msg.payload;\n\n// Parse the wind speed in knots\nlet windSpeed = parseFloat(data.w_speed_kts);\n\n// If the parsed wind speed is not a valid number, output null\nif (isNaN(windSpeed)) {\n    msg.payload = null;\n} else {\n    // Round the wind speed to two decimal places\n    msg.payload = Math.round(windSpeed * 100) / 100;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 380,
        "wires": [
            [
                "fab8bd20a3af2d2c",
                "c30e207efd8ebd48"
            ]
        ]
    },
    {
        "id": "c30e207efd8ebd48",
        "type": "ui_chart",
        "z": "cac41ceca32ba8f4",
        "name": "",
        "group": "baf37660cc1566a0",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Windspeed",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "25",
        "removeOlder": "15",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#f5ec00",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 930,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "65066aa50935f39f",
        "type": "function",
        "z": "cac41ceca32ba8f4",
        "name": "ParseFunction",
        "func": "let data = msg.payload;\n\n// Parse the SOG value as a float\nlet sog = parseFloat(data.SOG);\n\n// Check if the parsed value is a valid number; if so, round to two decimal places\nif (isNaN(sog)) {\n    msg.payload = null;\n} else {\n    msg.payload = Math.round(sog * 100) / 100;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 120,
        "wires": [
            [
                "a2395d9057c46ef9"
            ]
        ]
    },
    {
        "id": "a2395d9057c46ef9",
        "type": "ui_gauge",
        "z": "cac41ceca32ba8f4",
        "name": "",
        "group": "baf37660cc1566a0",
        "order": 2,
        "width": "4",
        "height": "3",
        "gtype": "gage",
        "title": "Coach Boatspeed",
        "label": "knots",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "1",
        "seg2": "3",
        "diff": false,
        "className": "",
        "x": 890,
        "y": 120,
        "wires": []
    },
    {
        "id": "e69b11a1a6e6629c",
        "type": "ui_chart",
        "z": "cac41ceca32ba8f4",
        "name": "",
        "group": "9fcd7d230c83dda0",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Apperent Windangle",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "360",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#00f900",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 940,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "5a95e6d353ba1a13",
        "type": "function",
        "z": "cac41ceca32ba8f4",
        "name": "ParseFunction",
        "func": "let data = msg.payload;\n\n// Parse the wind speed in knots\nlet w_angle = parseFloat(data.w_angle);\n\n// If the parsed wind speed is not a valid number, output null\nif (isNaN(w_angle)) {\n    msg.payload = null;\n} else {\n    // Round the wind speed to two decimal places\n    msg.payload = Math.round(w_angle * 100) / 100;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 500,
        "wires": [
            [
                "e69b11a1a6e6629c",
                "f799179af90d5601"
            ]
        ]
    },
    {
        "id": "c5a7a57af05ac1a5",
        "type": "function",
        "z": "cac41ceca32ba8f4",
        "name": "ParseFunction",
        "func": "let data = msg.payload;\n\n// Parse the wind speed in knots\nlet true_wind_dir = parseFloat(data.true_wind_dir);\n\n// If the parsed wind speed is not a valid number, output null\nif (isNaN(true_wind_dir)) {\n    msg.payload = null;\n} else {\n    // Round the wind speed to two decimal places\n    msg.payload = Math.round(true_wind_dir * 100) / 100;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 600,
        "wires": [
            [
                "d716fe94a1255f6b",
                "a59c2672c332ac1d"
            ]
        ]
    },
    {
        "id": "d716fe94a1255f6b",
        "type": "ui_chart",
        "z": "cac41ceca32ba8f4",
        "name": "",
        "group": "9fcd7d230c83dda0",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "True Windangle",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "360",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff9300",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 920,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "330f2c8944cb2bc8",
        "type": "function",
        "z": "cac41ceca32ba8f4",
        "name": "ParseFunction",
        "func": "let data = msg.payload;\n\n// Parse the wind speed in knots\nlet heading = parseFloat(data.heading);\n\n// If the parsed wind speed is not a valid number, output null\nif (isNaN(heading)) {\n    msg.payload = null;\n} else {\n    // Round the wind speed to two decimal places\n    msg.payload = Math.round(heading * 100) / 100;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 680,
        "wires": [
            [
                "3b713c50c07ac4be"
            ]
        ]
    },
    {
        "id": "f799179af90d5601",
        "type": "ui_text",
        "z": "cac41ceca32ba8f4",
        "group": "9fcd7d230c83dda0",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Apperent Windangle",
        "format": "{{msg.payload}}°",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 940,
        "y": 540,
        "wires": []
    },
    {
        "id": "a59c2672c332ac1d",
        "type": "ui_text",
        "z": "cac41ceca32ba8f4",
        "group": "9fcd7d230c83dda0",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "True Windangle",
        "format": "{{msg.payload}}°",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 920,
        "y": 640,
        "wires": []
    },
    {
        "id": "3b713c50c07ac4be",
        "type": "ui_text",
        "z": "cac41ceca32ba8f4",
        "group": "9fcd7d230c83dda0",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Heading",
        "format": "{{msg.payload}}°",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 900,
        "y": 700,
        "wires": []
    },
    {
        "id": "259e474bcf82a661",
        "type": "mqtt in",
        "z": "d8699a550f41ef88",
        "name": "",
        "topic": "phonelive",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4288dd7f10ed06f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 200,
        "wires": [
            [
                "571190578a3c4111"
            ]
        ]
    },
    {
        "id": "571190578a3c4111",
        "type": "debug",
        "z": "d8699a550f41ef88",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 200,
        "wires": []
    }
]